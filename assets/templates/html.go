// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/search.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xe2\xb4\xd1\x4f\xc9\x2c\xb3\xe3\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x01\x04\x00\x00\xff\xff\x1a\x92\x03\x62\x3a\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 58, mode: os.FileMode(420), modTime: time.Unix(1567012776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xb1\x8e\xdb\x30\x0c\x86\x67\xfb\x29\x08\x16\xe8\xe6\xf8\x7a\x43\x97\xda\xde\xfa\x00\x45\x9f\x80\xb6\x99\x58\xa9\x4c\x05\x22\x9d\x36\x30\xf2\xee\x85\xa2\x24\xbd\xa0\xb7\x14\xd7\x5b\x2c\x82\x22\x3f\xfe\xfa\x2d\x68\x5d\x61\xe4\xad\x13\x06\x9c\x98\x46\x8e\x08\xe7\x73\xd9\x4c\x36\xfb\xae\x04\x00\x68\x52\xba\x2b\x8b\xc6\x9c\x79\xee\x9a\x3a\xaf\x65\xd1\xe8\x10\xdd\xc1\xc0\x4e\x07\x6e\xd1\xf8\x97\xd5\x7b\x3a\x52\xce\x22\x68\x1c\x5a\xfc\x93\xa8\x7f\x4e\x41\x83\x6c\x5d\x54\xdb\x2c\xd1\x6d\xf6\x8a\x5d\x53\xe7\xcd\xb7\xd1\x84\xed\x3f\xd2\x76\x1c\xf6\x1a\xe4\x91\x58\x14\xff\xcc\x3c\x78\x1a\x78\x0a\x7e\xe4\xb8\x19\xbc\x63\xb1\xcd\x4c\x07\x7d\xa3\xd2\x57\xa8\x91\x75\xf1\xf6\x0e\x60\x27\xee\x6f\x63\xbd\x93\x1f\x2f\x99\x83\x2a\x42\x64\xdf\xa2\xda\xc9\xb3\x4e\xcc\x86\x30\x45\xde\xb6\x38\xa8\xbe\xc6\xbd\xb4\xd4\xd7\xdb\x55\xe7\xeb\x75\x89\xfb\x30\x9e\xd2\x8c\xd1\x1d\x61\xf0\xa4\xda\xe2\x10\xc4\xc8\x09\x47\xec\xca\xb2\xb8\x54\x09\xdd\x77\x85\x8e\x3d\x45\xc8\x4b\xe5\xdd\x6e\x32\xe8\x77\x39\xb8\x34\x14\x0d\x3d\xd6\x56\x7d\x24\x19\xb1\xfb\xf8\xe1\xd3\xe7\xa7\x2f\x4d\x4d\xb9\x6a\x1b\xe2\x7c\x2b\x4c\x71\xe5\xc4\x3b\x61\xec\xca\x22\x0f\x75\x72\x58\xec\xa1\x22\x29\x8b\xc1\xc3\x1c\x2b\x9d\xab\x67\xbc\x9a\xa2\x4c\x71\x98\x10\x84\xe6\xab\x45\x08\x6e\xbc\x45\x2f\xdc\x68\xf1\xab\x18\x47\xa0\x9c\xbc\x34\x80\x05\xc8\x00\xd8\x86\x88\x70\x24\xbf\x70\x8b\xeb\x0a\x9b\x6f\x0b\xc7\x13\x9c\xcf\x08\x14\x1d\x55\x9e\xfa\xe4\xf9\xf7\x3c\xed\x2e\xb3\x5f\xcc\x82\xdc\x74\xf6\x26\xd0\x9b\x54\x61\xb1\x74\x9a\x4a\x97\x61\x60\x55\x98\x4f\xd5\x73\xfa\xe8\x5c\x3d\xdd\x75\x2f\xfd\xec\x0c\xbb\x4c\x6c\xea\x4c\x4a\xe0\xa6\x4e\xe7\x4d\xd1\xf5\x07\xd4\x42\xc7\xae\x2c\xca\x75\x05\x96\x31\x3d\x17\xbf\x03\x00\x00\xff\xff\xab\x6d\xdd\x4e\x45\x04\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1093, mode: os.FileMode(420), modTime: time.Unix(1567022997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x55\xd1\x6e\xdb\x3a\x0c\x7d\xb6\xbf\x82\xf0\x0d\xee\xd3\x6c\xb7\x28\xb0\x87\xce\x35\xd0\x6e\xc3\x50\xa0\x18\xb6\x62\xfb\x00\xc5\xa2\x6d\x0d\xb2\xe4\x48\x4a\xda\xc0\xc8\xbf\x0f\x92\x2c\xc7\x6e\x52\xb4\x7b\x09\x62\x92\x87\x3c\xe4\xa1\xe9\x61\x00\x8a\x35\x13\x08\x89\x46\xa2\xaa\x36\x81\xc3\x21\x1e\x06\x30\xd8\xf5\x9c\x18\x84\xa4\x45\x42\x51\x25\x90\x59\x0f\x00\x80\x75\xb3\x1a\xb2\x9f\x5b\x54\x7b\x6b\xb4\x86\x15\x47\xd1\x98\x16\xae\x6f\x80\xa3\x80\xec\x11\xf5\x96\x1b\x1d\x30\x05\x65\x3b\xa8\x38\xd1\xfa\x26\xa9\x88\xa2\x49\x19\x47\x71\x54\xb4\x57\x73\x63\x3a\x96\x2a\xe3\xc8\x62\x7c\x7e\x35\x26\xaa\xa5\x82\x62\x53\x0e\xc3\xb1\x70\x91\x6f\xc6\x50\xcf\x48\xe0\x44\xe3\xc2\x16\x76\xae\x42\x77\x84\xf3\xd2\x47\xe0\x66\x8a\xb8\x84\xc3\xe1\x57\x8b\x0a\x81\x69\x90\x02\xa1\xe7\xa4\x42\xe8\x88\xa9\x5a\x26\x1a\x30\x2d\xd3\xb0\xb1\x95\x86\x01\x90\x6b\x9c\xe2\x89\x42\x98\x75\x7c\x38\x78\xa8\x7e\x0d\x2b\xa8\xe3\xea\x79\x4c\x7c\xbd\x39\x8e\x8a\xbc\xbd\x2a\xe3\x38\x7a\x39\xa1\x74\x2d\xe9\x3e\x8c\x22\xa0\x58\x0d\x90\x7d\x55\x4a\xaa\xa9\xbf\xb1\xcb\x19\x9a\x70\x54\x06\xdc\x6f\xfa\x44\x94\x60\xa2\x49\x40\x49\x8e\xa3\xcb\x26\x8d\x8a\xbe\xfc\x2d\xc8\x9a\x23\x18\x09\x95\xec\x7a\x8e\x06\x3d\x67\xd0\xdb\xaa\x42\xad\xeb\x2d\xe7\xfb\x0c\x7c\x39\x85\xbd\x54\x06\x29\x30\x7d\x5d\xe4\xbd\x4b\x51\x49\x8a\x4e\x90\xc0\xa8\xc8\x9d\x69\xa4\x94\x53\xb6\x7b\xc1\x3f\x0c\x32\x9e\xcb\x36\x13\xe5\xe2\xe8\x7b\xad\x23\x26\x6a\x79\xb6\x9d\xa3\x38\x42\x9e\x51\x84\x18\xdf\x5d\xe6\xd9\xcf\x18\x9e\x90\x7b\x39\x57\x46\x6f\x92\x8e\xf4\x49\x79\xda\xd2\xe4\x1f\xd7\x34\x35\x76\xa6\x49\x20\xee\x9e\x52\x85\xba\x97\x42\xb3\x1d\x7a\xae\xce\xba\x08\x01\x1f\xd8\xca\x9d\x5f\x7f\x9f\xdb\x28\xfb\x37\x2a\x4c\x5b\xfe\xff\xdf\xe5\xc7\x8b\x4f\x45\x6e\xda\xc9\x74\xff\x65\xf1\xf8\x9d\x74\xb8\x30\xfc\xb0\x23\x30\xfb\x7e\x69\x7d\xc4\x86\x49\xe1\x4c\x51\x14\x8c\x9f\xe5\x56\x18\xb5\x5f\x04\x3e\x10\xc3\xcc\x96\x2e\xd1\x0f\x52\x34\x47\xab\x4b\xe0\x07\xe9\xa9\x8e\x73\x54\x44\x34\x08\x2b\xf6\x01\x56\xca\x1e\x84\xf9\x31\x98\x5a\x0b\xfd\xfb\xc1\x25\xb3\x21\xa6\xf6\xe5\x52\xd9\xbd\x7d\x3f\x12\xa0\xc4\x90\xf4\xa9\x95\x5a\x8a\x9a\x29\x6d\x52\x1b\x78\x1a\xb1\x96\x5b\x41\x99\x68\xd2\xb5\x7c\x0e\xfe\x6f\x28\x3b\x34\x6a\x9f\xdd\x8d\xce\x3b\xf9\x6c\x11\x53\x3b\xc3\x00\xb7\x94\xc2\x8a\xb9\x6b\x30\xeb\x94\xbe\x42\x27\x65\x34\x29\x67\xcf\x45\x6e\xe8\x5b\x10\x41\x3a\x0c\x20\x2b\xd2\x3b\x61\x7d\x90\x2f\x60\x27\x3d\xdf\x99\xa0\xf2\xa2\x3a\xf8\xa8\xc8\x1f\xab\x48\x63\x25\xb9\x15\x15\x6a\x23\x95\xb6\x12\x25\xca\x2d\x85\x3d\xfd\x2e\x41\x13\x78\xce\xae\x97\xa1\xd3\xbe\xfc\x6b\xc5\xea\xb4\x60\x88\x1c\x2b\x56\xe7\x0b\xbe\x51\x8e\x8f\x1b\x1a\x06\x34\xc9\x1d\x56\xf7\xbd\x79\xc2\x52\x9f\x26\x0a\x9e\xc5\x08\xce\x6c\x7c\x38\xe6\x51\x91\xbb\x37\xf9\xcc\x09\x9c\x45\xf9\xf3\xb1\xf8\x06\xf8\xb8\x78\x06\x5a\x62\xc2\x77\xf7\xf8\x59\xae\xa5\x34\xd3\x67\xf9\x18\xf8\x37\x00\x00\xff\xff\x01\x84\xdc\xdd\xd1\x07\x00\x00")

func templatesHtmlSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearchHtml,
		"templates/html/search.html",
	)
}

func templatesHtmlSearchHtml() (*asset, error) {
	bytes, err := templatesHtmlSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search.html", size: 2001, mode: os.FileMode(420), modTime: time.Unix(1567024036, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/search.html": templatesHtmlSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"search.html": &bintree{templatesHtmlSearchHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

