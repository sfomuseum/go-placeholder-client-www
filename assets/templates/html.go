// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/search.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xe2\xb4\xd1\x4f\xc9\x2c\xb3\xe3\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x01\x04\x00\x00\xff\xff\x1a\x92\x03\x62\x3a\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 58, mode: os.FileMode(420), modTime: time.Unix(1567012776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xb1\x8e\xdb\x30\x0c\x86\x67\xfb\x29\x08\x16\xe8\xe6\xf8\x7a\x43\x97\xda\xde\xfa\x00\x45\x9f\x80\xb6\x99\x58\xa9\x4c\x05\x22\x9d\x36\x30\xf2\xee\x85\xa2\x24\xbd\xa0\xb7\x14\xd7\x5b\x2c\x82\x22\x3f\xfe\xfa\x2d\x68\x5d\x61\xe4\xad\x13\x06\x9c\x98\x46\x8e\x08\xe7\x73\xd9\x4c\x36\xfb\xae\x04\x00\x68\x52\xba\x2b\x8b\xc6\x9c\x79\xee\x9a\x3a\xaf\x65\xd1\xe8\x10\xdd\xc1\xc0\x4e\x07\x6e\xd1\xf8\x97\xd5\x7b\x3a\x52\xce\x22\x68\x1c\x5a\xfc\x93\xa8\x7f\x4e\x41\x83\x6c\x5d\x54\xdb\x2c\xd1\x6d\xf6\x8a\x5d\x53\xe7\xcd\xb7\xd1\x84\xed\x3f\xd2\x76\x1c\xf6\x1a\xe4\x91\x58\x14\xff\xcc\x3c\x78\x1a\x78\x0a\x7e\xe4\xb8\x19\xbc\x63\xb1\xcd\x4c\x07\x7d\xa3\xd2\x57\xa8\x91\x75\xf1\xf6\x0e\x60\x27\xee\x6f\x63\xbd\x93\x1f\x2f\x99\x83\x2a\x42\x64\xdf\xa2\xda\xc9\xb3\x4e\xcc\x86\x30\x45\xde\xb6\x38\xa8\xbe\xc6\xbd\xb4\xd4\xd7\xdb\x55\xe7\xeb\x75\x89\xfb\x30\x9e\xd2\x8c\xd1\x1d\x61\xf0\xa4\xda\xe2\x10\xc4\xc8\x09\x47\xec\xca\xb2\xb8\x54\x09\xdd\x77\x85\x8e\x3d\x45\xc8\x4b\xe5\xdd\x6e\x32\xe8\x77\x39\xb8\x34\x14\x0d\x3d\xd6\x56\x7d\x24\x19\xb1\xfb\xf8\xe1\xd3\xe7\xa7\x2f\x4d\x4d\xb9\x6a\x1b\xe2\x7c\x2b\x4c\x71\xe5\xc4\x3b\x61\xec\xca\x22\x0f\x75\x72\x58\xec\xa1\x22\x29\x8b\xc1\xc3\x1c\x2b\x9d\xab\x67\xbc\x9a\xa2\x4c\x71\x98\x10\x84\xe6\xab\x45\x08\x6e\xbc\x45\x2f\xdc\x68\xf1\xab\x18\x47\xa0\x9c\xbc\x34\x80\x05\xc8\x00\xd8\x86\x88\x70\x24\xbf\x70\x8b\xeb\x0a\x9b\x6f\x0b\xc7\x13\x9c\xcf\x08\x14\x1d\x55\x9e\xfa\xe4\xf9\xf7\x3c\xed\x2e\xb3\x5f\xcc\x82\xdc\x74\xf6\x26\xd0\x9b\x54\x61\xb1\x74\x9a\x4a\x97\x61\x60\x55\x98\x4f\xd5\x73\xfa\xe8\x5c\x3d\xdd\x75\x2f\xfd\xec\x0c\xbb\x4c\x6c\xea\x4c\x4a\xe0\xa6\x4e\xe7\x4d\xd1\xf5\x07\xd4\x42\xc7\xae\x2c\xca\x75\x05\x96\x31\x3d\x17\xbf\x03\x00\x00\xff\xff\xab\x6d\xdd\x4e\x45\x04\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1093, mode: os.FileMode(420), modTime: time.Unix(1567022997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5b\x53\xe3\x38\x16\x7e\x86\x5f\xa1\xcd\x76\xcd\x3e\xcc\x84\x38\x89\xe9\x6a\x7a\x02\x5b\x24\x36\x60\x4a\x72\x12\xec\x00\xc9\x9b\x2f\xc2\x96\xf0\x25\xed\x4b\x1c\x9b\xe2\xbf\x6f\x1d\x39\x76\x92\x86\xd9\xe9\x7d\xdc\x07\xe1\x70\x6e\xfa\xce\x27\xe9\x58\xc7\x6f\x6f\xc8\xa5\x2f\x2c\xa2\xa8\x93\x52\x2b\x71\xfc\x0e\x7a\x7f\x3f\x7d\x7b\x43\x19\x0d\xd7\x81\x95\x51\xd4\xf1\xa9\xe5\xd2\xa4\x83\xce\x40\x83\x10\x42\xa0\x66\x2f\xe8\x6c\x9e\xd3\xa4\x04\x21\x08\xbe\x04\x34\xf2\x32\x1f\x7d\xbf\x44\xd2\x4e\x06\x36\x0f\x34\xcd\x83\x2c\xdd\x05\x6d\x8c\x2e\x51\x40\xa3\x9f\x95\x34\x72\x85\x23\x4c\x31\x72\xd9\x06\x39\x81\x95\xa6\x97\x1d\xc7\x4a\xdc\xce\xd5\xe9\xc9\xe9\xc9\xc8\x1f\x1e\x0a\xbb\x3b\x64\x57\xa7\x27\xe0\x53\xc3\x49\x76\x31\x5f\xe2\x04\x8d\x7e\x5c\xbd\xbd\xed\x71\x8e\x7a\x3f\x76\xa6\x75\x02\x11\x6d\x01\x09\xc8\x42\x35\x4a\x43\x2b\x08\xae\x6a\x0b\xfa\xa3\xb5\xe8\xa3\xf7\x77\xd3\xa7\x09\x45\x2c\x45\x71\x44\xd1\x3a\xb0\x1c\x8a\x42\x2b\x73\x7c\x16\x79\x28\xf3\x59\x8a\x7e\xc0\x4c\x90\x4a\x90\xd2\xd6\xde\x4a\x28\x3a\xc8\xfd\xfd\xbd\x76\x4d\xff\xca\x57\xd0\x30\xea\xd5\x38\x5a\xbc\x3b\x76\x4e\x46\x3d\x7f\x78\x75\x7a\x7a\xf2\x33\x43\x5d\x3b\x76\xcb\x86\x8a\xc6\x8b\xbd\x20\x74\xa6\x26\x49\x9c\xb4\xf9\xed\xb2\x3c\xf0\xb6\x02\x9a\x64\x48\xfc\xed\x16\x56\x12\xb1\xc8\xeb\xa0\x24\x0e\xe8\x4e\x05\x41\x4f\x46\xeb\xab\x45\x64\xd9\x01\x45\x59\x8c\x9c\x38\x5c\x07\x34\xa3\x35\x66\x94\xe6\x8e\x43\xd3\xf4\x25\x0f\x82\xf2\x0c\xd5\xd3\x25\x74\x1d\x27\x19\x75\x11\x4b\xbf\x8f\x7a\x6b\x11\xc2\x89\x5d\x2a\x16\xa4\x41\x34\xea\x09\xd1\x0e\x52\xcf\x65\x9b\x9f\xf0\x37\x44\x9e\x1e\x2e\xdb\xc1\xa2\x48\x7b\xdd\x5f\x65\xc4\xa2\x97\xf8\xd3\x74\xf6\x8b\x13\xc5\x9f\xac\x88\x95\xd5\xd9\x9d\xd5\xe8\x0f\x10\x7e\x00\xf7\x33\xaf\xcc\xbd\xec\x84\xd6\xba\x73\xf5\x31\xa5\x56\xbf\xdb\xa6\xdd\x0c\x38\xed\x34\xc0\xc5\x7f\xdd\x84\xa6\xeb\x38\x4a\xd9\x86\xd6\x58\x85\xf4\xc8\x04\xd5\x86\x7e\xbc\xa9\xb7\x7f\x1d\x3b\x4b\xe0\xe7\xc9\x28\xf3\xaf\x7e\xfb\x67\xff\xab\xf4\xe7\xa8\x97\xf9\xad\x48\x53\x8e\xfe\xd5\xad\x90\x1e\x09\x66\x40\x41\x56\xae\x8f\xa5\x0f\xd4\x63\x71\x24\x44\x27\x27\x8d\x70\x12\xe7\x51\x96\x94\x47\x86\xd8\xca\x58\x96\xbb\xc7\xde\x38\x8e\xbc\xbd\x54\x04\xa8\x89\xac\xa1\xee\x78\x4c\xac\xc8\xa3\xe8\x0b\xfb\x03\x7d\x49\xa0\x7e\x1c\xd6\x85\x36\xb5\x26\xff\x9a\xb8\xce\x01\x89\x5d\x38\x5c\xc9\x99\x06\xe7\xa3\x83\x5c\x2b\xb3\xba\x85\x1f\xa7\x71\xf4\xc2\x92\x34\xeb\x82\xe1\x47\x0b\x3b\xce\x23\x97\x45\x5e\xd7\x8e\xb7\x8d\xfe\x96\xc6\x21\xcd\x92\xf2\x6c\xbc\x53\x8e\xe3\x2d\x78\xb4\xe9\x9c\xc2\x8f\x1d\xe8\x6b\xd7\x45\x5f\x98\x28\x0b\x8d\xb4\x79\x8e\xfe\xd1\xed\x22\x3f\xcb\xd6\xe9\xf7\x5e\x2f\xf3\x69\x14\xe7\xd1\x3a\x89\x39\x75\xb2\x33\x27\x0e\x7b\x75\xa1\xed\xfd\xfb\xc7\xa5\x17\xc4\x36\xfd\x8d\x5d\x0e\xbe\xf5\x2f\xbe\x7d\xfd\x8a\xba\xdd\xab\x36\x88\x85\xfc\x84\xbe\x5c\x76\x9a\x40\xe9\x9a\x06\x79\xf4\x4a\x93\xb3\x83\xec\xce\xe2\xc4\xeb\x31\xb7\x77\x94\x60\x66\x25\x1e\xcd\x2e\x3b\xad\x47\xe7\x6a\xc4\x42\x0f\xa5\x89\x73\xd9\x81\xec\xbf\xb3\xd0\xf2\x68\x2f\xdd\x78\xbf\x6f\xc3\xe0\x4f\xdb\x4a\xe9\x57\xf9\x8f\xd9\x9d\x3e\x58\x95\x63\xd9\x7e\xda\xe6\x4e\x25\x31\xeb\xee\x41\x72\x94\x78\x83\x87\xee\xd0\x2d\xcf\x87\xa4\x3c\xdf\x38\xa1\xb3\x21\xfc\xba\x20\x93\x8b\xca\x0d\x1d\xa6\xdd\x3e\xf8\xee\xad\x9a\xd9\xe1\x4d\xb6\x32\x25\x66\x2c\xf4\x99\xc9\xc6\x93\xf9\x62\xab\x18\xa5\xe6\xb9\x61\x10\xb8\xd2\xfd\x86\x2a\x12\x23\x93\xeb\x42\x53\x48\xa9\x29\xf3\x42\x63\x63\x79\x66\x68\x85\x73\xe7\x31\xed\xee\xf5\x42\xe3\xe3\x82\x4e\xb4\xdf\x67\x77\x0f\x6b\xf7\x76\x1b\xcc\x42\x37\xb5\x07\xf7\xc1\x6c\x72\x21\x59\xcf\x0f\xe9\xca\x94\xbf\x39\xb7\x37\x92\x35\x19\xbf\xce\x8c\x7b\x9d\xf0\x79\x3e\x55\xd4\x94\x98\x81\x4f\xcc\xeb\x54\x8c\x49\x51\x60\xe5\x3a\x25\x4c\xae\xa6\x13\x69\x80\xf9\x5c\xc6\xca\xab\xb0\x9b\x1a\xb2\x4c\x8c\x9d\x7e\x22\xe5\xba\xb9\xcc\x48\x29\x97\x7a\x29\xf7\x75\x06\xa3\xd1\x15\x05\x36\xe4\x2d\x61\xc5\x96\x4c\xc4\x68\x7c\xb6\x3a\x93\x4b\x6c\xce\x73\xa2\xac\xc8\x14\x6c\xca\xa2\xc2\xdc\xeb\x2f\x0d\xb9\x4f\xc4\x38\x88\x5f\xa9\xa9\xf0\x67\x72\x85\x15\xb5\xc4\x9c\xb4\xf8\xa6\x13\xb9\x24\x46\x51\x92\xe7\xe5\x16\x73\x6d\x60\x28\x6a\x1f\xf3\xc0\x27\x4c\x1e\xea\x46\x51\x62\xee\xf4\x5b\x2c\xa6\x96\xeb\xd5\x22\x15\xba\xc7\x65\x39\x7d\x52\x73\xdd\x90\xf7\xfa\x89\xdc\xc7\xfc\x31\xd6\x07\x9f\xc8\x0d\xb9\xef\x32\x29\x27\xe6\xc3\x7f\x8b\x9d\x09\xdd\x93\x97\x61\xee\x94\x8f\x5c\x93\x44\x4e\x26\x60\xd6\xa4\x1a\x3b\x3c\x1b\x7e\xbd\x9c\x70\x15\xb8\xeb\x4f\x27\x72\x9f\x30\x18\x2d\x77\x39\x31\xe7\x19\xe6\x64\x80\xf9\x22\xd7\x0f\xf8\xd8\xc9\xfb\xa6\x02\xf1\x17\x43\xac\xa8\xe7\x98\xeb\x3e\xf0\xa6\x4f\x8a\x2d\xe6\x0b\xe9\x00\xfb\x56\x2f\xc1\x27\x18\x63\xae\x55\x62\xb4\xf3\x0b\x7c\x5b\xf0\x7f\x7a\x95\x4a\x32\x91\x0b\xbd\x2c\x4a\xc0\x62\x28\xaa\x84\xb9\x7a\xbe\x34\xd5\x5c\xaf\x96\x29\x31\xe4\x61\xbb\xae\x06\xcc\xe1\x6c\xb1\xa9\xe6\xa4\x0a\x62\xc2\x64\x49\x5f\xa8\x20\x03\x2c\xb9\x5e\x39\xbb\xf8\x6a\x4a\xf8\x75\x4e\x14\x27\x25\xdc\xcb\xf5\xc7\xb5\x3e\x35\xe4\x52\x9f\x14\x32\xe6\x2a\xac\xe5\x16\xf3\xf9\x10\x2b\x7e\x8a\x41\x6e\x14\x15\xac\x3f\xe6\x8b\x76\x7d\x31\x9f\x43\x8e\x92\xad\x90\x1c\x62\x90\xea\x35\x05\xbe\xea\x3c\xe7\x12\x60\xd0\xb9\x9a\x0a\xee\x42\x35\xd7\x15\x0f\x46\xe3\x9f\x61\x7e\x3d\xc0\x9c\x0c\xed\x89\x3c\xd0\x19\xec\xb1\xeb\xfe\xc7\x39\x48\x4e\xaa\x65\xae\x9b\x1e\x8c\x03\xb9\x7a\x5e\x3f\x17\x95\x18\x7b\x4e\x4b\xc1\xa9\xe2\xc3\xbc\xa5\xc0\x00\xb9\x96\x45\x3e\x55\xee\xc7\x53\xa3\x38\xdf\xd9\x6e\xe1\xcc\x10\x3e\x87\x7d\xba\x25\xfd\x75\x46\xcc\x05\x9c\xaf\x9c\x28\xe2\xcc\x0c\x49\x29\x6d\x97\x86\x2c\xe9\x25\x8c\x83\x3d\x0f\x6b\x11\x16\x19\xf0\x3e\x15\x7c\xab\x12\x06\x3b\x26\x95\x98\xab\x7d\xe0\x79\xaa\xa8\xb0\xdf\x64\x7d\xa1\xe6\x3a\xec\x3f\x53\xdb\x9f\x5b\xf3\x35\xd7\xcb\x62\x4b\x06\x1f\x74\x19\xe6\xda\x39\x36\xe4\x8a\x2c\x8a\xad\x0e\xbc\xc3\xf9\x7c\x2a\xb2\x7a\x4d\xae\xeb\x98\x90\x5f\x35\xcf\x09\x17\x38\xeb\x38\x87\x67\xc2\x90\xb7\xba\x21\xe5\xba\x0a\xf1\xc5\x38\x98\x5b\x4b\x75\x26\x9f\x13\xc0\xcf\x60\x1f\x3f\xfa\xc7\x9c\x2c\x73\xc2\x17\x62\xdf\x93\xd7\x62\xab\x8b\xbd\x5f\x0c\x30\x57\xe5\x8f\x6b\x03\xeb\xb7\x2c\x6d\xc8\x17\x72\x08\x3f\xe6\x8a\xf9\x12\xd6\x55\xb6\x15\xad\x3e\x4f\x06\xd4\x2c\x71\x0e\x2a\x0c\xb2\x8f\xfb\x02\xf6\x15\xd4\x8b\xd2\x52\xe6\xb9\x6e\xde\x1c\xe3\x13\xf9\x78\xa2\xb6\x4c\x6f\xd6\x10\xaf\xc4\x26\xac\xa3\xaf\x11\x0e\xba\x07\x02\xfc\x4e\x0d\xc0\xbc\xa8\x3e\xad\x59\x1c\x6a\x80\x2a\x99\x8a\x3a\xc0\xfc\x55\xc2\x8a\xb3\xab\xb1\x8b\x5c\x37\x1d\xe0\xa7\x9a\x3e\x01\x46\xaf\x84\xda\x31\x55\xfc\xf1\xd4\x10\xe7\xef\x1c\xf3\xeb\xe1\x9e\x2b\xad\x2f\xb0\x2a\x5e\x3e\x35\x6f\x2c\xdb\x90\x64\xcc\x35\x19\x2b\x6a\x7f\x6e\xc2\xf9\x21\x52\x7d\x8e\x88\xb4\xf7\x59\xec\xe6\x02\x9e\x56\x3e\x81\x73\xca\xb5\xb4\x7d\x36\x67\xb3\x94\x86\x98\x2f\x25\x7b\x22\x9f\x63\x1e\x8c\x61\x5f\x4e\xcd\x79\xda\x3e\xf7\x35\x16\x6a\xfa\x10\x73\x52\xef\x55\x31\x0e\xeb\x91\x2a\xea\xcb\x87\x77\x07\x27\xf9\x54\x9c\xfd\x71\x8a\xf9\x6b\x3e\x5d\xa8\x5b\xe0\x92\xc0\xbe\xac\x9f\x6d\x3d\xd1\x4b\xf1\x0e\x28\x49\x29\xcb\xd3\x9b\x98\xe1\x4a\xfe\xe6\xde\x3e\xca\xee\xa4\x7e\xb7\x69\x6c\x7c\x3e\x33\x34\x49\x2f\x35\x6f\x15\x06\xa9\xad\x48\x4c\xab\xae\x0b\xa2\xc0\xfb\x13\x64\x17\xb9\x3b\xe9\x57\xd6\xf3\x3a\x98\x19\x5a\x5f\xbc\x0b\x6f\x57\x1b\x3b\x9a\x67\xee\xe0\x71\xbd\x1a\xf8\xd2\xcc\xb8\x67\xf6\x60\xfb\xaa\xb1\x71\x68\x0f\xce\x25\xfc\xb4\xf2\xed\xa7\x20\xa5\xa6\xc4\xee\x25\x3f\xb0\xef\x56\x81\x7b\x1b\xf0\xa5\x31\x9e\xae\x9e\x1f\x83\xfb\xb2\xf0\x8c\xdb\xc7\xd4\x0d\x1f\x25\xeb\x49\xf7\xf1\x64\x3c\x76\xc2\xc0\xb7\x27\xfd\x47\x3b\x0c\xb8\x3d\x78\x08\xf6\xb2\xc2\x5b\x0c\x6e\x72\xa7\xec\x57\xab\xe7\xfb\xf5\x8a\x69\xbf\xcf\x87\xf7\xc1\xf2\xf9\x21\x58\x4d\xc6\x8c\x1a\xe3\xb9\x75\x1b\xa4\xd6\xf3\xb8\xd0\x6e\xc6\x81\x7b\xb7\x4e\x96\x66\xb1\x11\x39\x2a\x9f\xe6\xda\x27\xec\xff\x27\xd7\x55\x74\xbf\xb1\x8d\xb1\x64\xdd\x2e\x3c\x33\xbc\xe8\xdb\x6c\x3c\x77\xc2\x8b\x1f\xab\x27\x5d\x82\x7b\xc7\xea\xd9\x97\x66\xbc\xd8\x38\xc3\x55\x34\xf3\x2e\x2f\x3b\xc8\xa7\xcc\xf3\xb3\xcb\xce\x40\xee\xa0\x82\xb9\x99\x5f\xff\xcc\x58\x06\xdd\xc5\x23\xa3\x45\xdd\xca\xd5\xad\x21\x8b\x50\xe6\x53\xf4\xe4\xc7\xff\x4a\xd1\x34\x42\x37\x70\x61\x43\x46\x7b\x29\x43\xbd\xab\x51\xcf\xba\xaa\xef\x7b\xe2\x6a\x79\x70\x77\x76\xff\xe2\x82\xdb\x65\x6e\xdb\x2d\x1c\xdf\x72\x5b\x1c\xab\x38\x0e\xa1\x4b\x3b\x80\x12\xd7\x50\x44\x53\x72\x10\x6c\xd4\xcb\xdc\xbf\x9b\x2f\xb2\x42\xda\x38\x41\xcf\xf0\x8b\x6e\xeb\xa6\x9b\x68\x7c\xdb\xf6\xe2\x17\x03\x38\x75\x8f\x21\xdc\x77\x0d\x02\x87\x06\xc1\x83\x0e\xe1\x3a\x72\x68\x9a\xc5\x49\x0a\x1d\x43\x27\x11\x3d\x4a\x07\xbd\xbf\x8b\x00\x5e\x83\xf3\xa0\x99\xce\xdc\xb6\x7d\xf9\x5f\x67\x74\x3e\x4e\xd8\x58\xee\x66\x74\x3e\x9f\xf0\x6f\xa6\x0b\x76\x0d\x53\x43\x50\xdb\x7d\x34\x9d\xd4\xaf\xc6\x69\x7a\xac\x8f\x81\x1a\xcd\x11\x05\x9f\x34\x60\xcd\xb7\x05\xd8\x80\xd0\x58\x7e\xd2\x91\x1f\x58\xd5\xad\xce\xd1\x27\x89\xda\xee\xf4\xc0\xe9\xd8\xa7\xf9\x6a\xb4\xff\xa8\xf4\x12\xc7\x59\xfb\x51\x69\x6f\xf8\x9f\x00\x00\x00\xff\xff\xf0\xd0\xa6\xfd\x8f\x12\x00\x00")

func templatesHtmlSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearchHtml,
		"templates/html/search.html",
	)
}

func templatesHtmlSearchHtml() (*asset, error) {
	bytes, err := templatesHtmlSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search.html", size: 4751, mode: os.FileMode(420), modTime: time.Unix(1567025931, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/search.html": templatesHtmlSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"search.html": &bintree{templatesHtmlSearchHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

