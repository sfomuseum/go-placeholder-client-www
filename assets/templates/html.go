// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/search.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xe2\xb4\xd1\x4f\xc9\x2c\xb3\xe3\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x01\x04\x00\x00\xff\xff\x1a\x92\x03\x62\x3a\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 58, mode: os.FileMode(420), modTime: time.Unix(1567012776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x94\x41\x8f\xda\x30\x10\x85\xcf\xc9\xaf\x18\xf9\xee\xa4\xda\x73\xc8\xad\x97\xaa\x87\x6d\xab\xfe\x80\x89\x33\x21\xa6\x8e\x1d\x8d\x27\x74\x51\xc4\x7f\xaf\x1c\x03\x65\x25\x7a\xdb\x72\xc1\x23\xf3\x78\xdf\xf3\xb3\xcc\xba\x42\x4f\x83\xf5\x04\x6a\x24\xec\x89\x15\x9c\xcf\x65\x33\xca\xe4\xda\x12\x00\xa0\x49\xdb\x6d\x59\x34\x62\xc5\x51\xdb\xd4\x79\x2d\x8b\x26\x1a\xb6\xb3\x80\x9c\x66\xda\x29\xa1\x37\xa9\x0f\x78\xc4\xbc\xab\x20\xb2\xd9\xa9\x75\x85\x2f\xc1\x7a\xa8\x7e\x7e\xff\xfa\xca\x34\xd8\x37\x50\x77\xaa\xda\x05\x83\x6e\x08\x8c\x7b\xaa\x26\xeb\xab\x43\x4c\x78\xd5\x36\x75\x16\x7c\x10\xe6\xf7\x18\x62\xf0\x83\xe5\x28\xd5\xc2\xf6\x19\x18\x4f\xf2\x0c\xcc\x9e\xc2\x21\x86\x07\xc5\x15\xc5\xc7\xc0\x66\x87\x86\xc6\xe0\x7a\xe2\xca\x38\x4b\x5e\xaa\x09\xe7\xf8\xbf\xce\xf6\x00\xc7\x14\x17\x27\xcf\x24\x5a\x6f\x1f\x5f\x9e\xb3\xfe\xd7\x3d\xcc\xc4\xa8\x80\xc9\xed\x54\x94\x93\xa3\x38\x12\x89\x82\x91\x69\xf8\x07\xd7\xc4\xf8\x08\xb8\xf9\x9c\xcf\x0a\xea\xcb\x9b\xab\xf3\xa3\xdb\xe6\x2e\xf4\x27\xe8\x51\x50\x2f\xec\xf4\xbc\x59\x6d\xf6\x77\xce\x29\x68\x59\x34\xbd\x3d\x82\x71\x18\xe3\x4e\x99\xe0\x05\xad\x27\x56\x6d\x59\x16\x9b\x91\xc7\xdb\xb7\x1e\x8f\x1d\x32\xe4\x45\x3b\xbb\x1f\x65\xd3\x15\x0d\xbe\x97\xe8\x8e\xd1\xf7\xaa\x7d\xfd\x1b\xba\xa9\x31\x4b\x87\xc0\xd3\x55\x9d\x66\x6d\xbd\xb3\x9e\x52\x92\x0c\xb4\x7e\x5e\xe4\x9d\x22\xa5\xe2\xe0\x60\x62\x1d\x27\xfd\xa2\x2e\x65\x46\x42\x36\xa3\x02\x8f\xd3\xa5\x5a\x05\xb6\xbf\x4e\x77\x85\xed\xd4\x67\x2f\xc4\x80\x79\x73\xfb\x01\x48\x80\x6c\x00\x43\x60\x05\x47\x74\x0b\xe5\x82\xbe\x2d\xc4\xa7\xad\x58\x64\x8b\xda\x61\x97\xee\xea\x47\xa6\xdd\x62\x76\x8b\x48\xf0\xd7\x9c\x9d\x78\xe8\xc4\xeb\xb0\x48\x3a\x8d\x8e\x8b\x31\x14\x23\x4c\x27\xfd\x92\x3e\xe2\xa4\x3f\xdd\x72\x2f\xdd\x64\x45\xb5\xd9\xb1\xa9\xb3\x53\x32\x6e\xea\x74\xde\x34\x5d\xca\xaf\x3d\x1e\xdb\xb2\x28\xd7\x15\xc8\xf7\xe9\x3f\xf6\x4f\x00\x00\x00\xff\xff\x80\x07\x38\x9d\x7a\x05\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1402, mode: os.FileMode(420), modTime: time.Unix(1568225849, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xd9\x52\xe3\x48\xd6\xbe\x86\xa7\xc8\xdf\x7f\x45\xcf\x45\xb7\xb1\x6c\x8b\x8a\xa2\xda\x30\x81\x2d\x01\x22\x32\x65\x1b\xc9\x80\x7d\xa7\x25\x91\x32\xd1\x62\xb4\x58\x96\x09\xde\x7d\xe2\xa4\x16\xdb\x05\x3d\xdd\xb7\x53\x11\x59\x32\x67\xfd\xce\x97\x8b\xf2\xe8\xfd\x1d\xb9\xf4\x85\x45\x14\x75\x52\x6a\x25\x8e\xdf\x41\x1f\x1f\xa7\xef\xef\x28\xa3\xe1\x3a\xb0\x32\x8a\x3a\x3e\xb5\x5c\x9a\x74\xd0\x19\x68\x10\x42\x08\xd4\xec\x05\x9d\xcd\x73\x9a\x94\x20\x04\xc1\xb7\x80\x46\x5e\xe6\xa3\x9f\x97\x48\xaa\x65\x60\xf3\x40\xd3\x3c\xc8\xd2\x3a\x68\x63\x74\x89\x02\x1a\xfd\xaa\xa4\x91\x2b\x1c\x21\xc5\xc8\x65\x1b\xe4\x04\x56\x9a\x5e\x76\x1c\x2b\x71\x3b\x57\xa7\x27\xa7\x27\x23\x7f\x78\x28\xec\xd6\xc8\xae\x4e\x4f\xc0\xa7\x82\x93\xd4\x31\x5f\xe2\x04\x8d\xde\xae\xde\xdf\xf7\x38\x47\xbd\xb7\xda\xb4\x2a\x20\xa2\x2d\x20\x01\x59\xa8\x46\x69\x68\x05\xc1\x55\x65\x41\xdf\x5a\x8b\x3e\xfa\xf8\x30\x7d\x9a\x50\xc4\x52\x14\x47\x14\xad\x03\xcb\xa1\x28\xb4\x32\xc7\x67\x91\x87\x32\x9f\xa5\xe8\x0d\x32\x41\x29\x41\x4a\x5b\x7b\x2b\xa1\xe8\xa0\xf6\x8f\x8f\xca\x35\xfd\x2b\x5f\x41\xc3\xa8\x57\xe1\x68\xf1\xd6\xec\x9c\x8c\x7a\xfe\xf0\xea\xf4\xf4\xe4\x57\x86\xba\x76\xec\x96\x0d\x15\x8d\x17\x7b\x41\xe8\x4c\x4d\x92\x38\x69\xeb\xab\xab\x3c\xf0\xb6\x02\x9a\x64\x48\xfc\xdf\x2d\xac\x24\x62\x91\xd7\x41\x49\x1c\xd0\x5a\x05\x41\x4f\x46\xeb\xab\x45\x64\xd9\x01\x45\x59\x8c\x9c\x38\x5c\x07\x34\xa3\x15\x66\x94\xe6\x8e\x43\xd3\xf4\x25\x0f\x82\xf2\x0c\x55\xe9\x12\xba\x8e\x93\x8c\xba\x88\xa5\x3f\x47\xbd\xb5\x08\xe1\xc4\x2e\x15\x13\xd2\x20\x1a\xf5\x84\xa8\x86\xd4\x73\xd9\xe6\x17\xfc\x0d\x91\xa7\x87\xd3\x76\x30\x29\xd2\x5e\xf7\x57\x15\xb1\xe8\x25\xfe\xb2\x9c\xfd\xe4\x44\xf1\x17\x33\x62\x65\x55\x75\x67\x15\xfa\x03\x84\x9f\xc0\xfd\xca\x2b\x73\x2f\x3b\xa1\xb5\xee\x5c\x7d\x2e\xa9\xd5\xd7\xcb\xb4\x9b\x01\xa7\x9d\x06\xb8\xf8\xab\x9b\xd0\x74\x1d\x47\x29\xdb\xd0\x0a\xab\x90\x1e\x99\xa0\xca\xd0\x8f\x37\xd5\xf2\xaf\x62\x67\x09\xfc\x3c\x19\x65\xfe\xd5\x6f\xff\xdf\xff\x2e\xfd\x39\xea\x65\xfe\x57\xa2\x13\xf1\xaf\x51\x68\xca\x91\x9d\x6e\x85\xf4\x48\x30\x03\x6e\xb2\x72\x7d\x2c\x7d\xa0\x1e\x8b\xa3\x3a\x5c\x23\x9c\xc4\x79\x94\x25\xe5\x91\x21\xb6\x32\x96\xe5\xee\xb1\x37\x8e\x23\xef\x48\x5a\xf1\x5b\x55\x50\xd3\x9b\x58\x91\x47\xd1\x37\xf6\x07\xfa\x96\xc0\xb1\x72\x78\x5c\xb4\x15\x37\xb4\x54\x7c\x76\x0e\xb8\xed\xc2\x9e\x4b\xce\x34\xd8\x36\x1d\xe4\x5a\x99\xd5\x2d\xfc\x38\x8d\xa3\x17\x96\xa4\x59\x17\x0c\x3f\x5b\xd8\x71\x1e\xb9\x2c\xf2\xba\x76\xbc\x6d\xf4\xb7\x34\x0e\x69\x96\x94\x67\xe3\x5a\x39\x8e\xb7\xe0\xd1\x16\xf3\xfe\x8e\xae\x5d\x17\x7d\x63\xe2\x90\x38\xa8\xd3\x05\xa6\xab\xc9\xaf\x01\xff\x5f\xb7\x8b\xfc\x2c\x5b\xa7\x3f\x7b\xbd\xcc\xa7\x51\x9c\x47\xeb\x24\xe6\xd4\xc9\xce\x9c\x38\xec\x55\x47\x70\xef\xdf\x6f\x97\x5e\x10\xdb\xf4\x37\x76\x39\xf8\xd1\xbf\xf8\xf1\xfd\x3b\xea\x76\xaf\xda\x20\x16\xf2\x13\xfa\x72\xd9\x69\x02\xa5\x6b\x1a\xe4\xd1\x2b\x4d\xce\x0e\x0a\x3c\x8b\x13\xaf\xc7\xdc\xde\x51\x8d\x99\x95\x78\x34\xbb\xec\xb4\x1e\x9d\xab\x11\x0b\x3d\x94\x26\xce\x65\x07\x08\xf8\xc9\x42\xcb\xa3\xbd\x74\xe3\xfd\xbe\x0d\x83\x3f\x6d\x2b\xa5\xdf\xe5\x3f\x66\x77\xfa\x60\x55\x8e\x65\xfb\x69\x9b\x3b\x3b\x89\x59\x77\x0f\x92\xa3\xc4\x1b\x3c\x74\x87\x6e\x79\x3e\x24\xe5\xf9\xc6\x09\x9d\x0d\xe1\xd7\x05\x99\x5c\xec\xdc\xd0\x61\xda\xed\x83\xef\xde\xaa\x99\x1d\xde\x64\x2b\x53\x62\xc6\x42\x9f\x99\x6c\x3c\x99\x2f\xb6\x8a\x51\x6a\x9e\x1b\x06\x81\x2b\xdd\x6f\xa8\x22\x31\x32\xb9\x2e\x34\x85\x94\x9a\x32\x2f\x34\x36\x96\x67\x86\x56\x38\x77\x1e\xd3\xee\x5e\x2f\x34\x3e\x2e\xe8\x44\xfb\x7d\x76\xf7\xb0\x76\x6f\xb7\xc1\x2c\x74\x53\x7b\x70\x1f\xcc\x26\x17\x92\xf5\xfc\x90\xae\x4c\xf9\x87\x73\x7b\x23\x59\x93\xf1\xeb\xcc\xb8\xd7\x09\x9f\xe7\x53\x45\x4d\x89\x19\xf8\xc4\xbc\x4e\xc5\x98\x14\x05\x56\xae\x53\xc2\xe4\xdd\x74\x22\x0d\x30\x9f\xcb\x58\x79\x15\x76\x53\x43\x96\x89\x51\xeb\x27\x52\xae\x9b\xcb\x8c\x94\x72\xa9\x97\x72\x5f\x67\x30\x1a\x5d\x51\x60\x43\xde\x12\x56\x6c\xc9\x44\x8c\xc6\x67\xab\x33\xb9\xc4\xe6\x3c\x27\xca\x8a\x4c\xc1\xa6\x2c\x76\x98\x7b\xfd\xa5\x21\xf7\x89\x18\x07\xf1\x77\x6a\x2a\xfc\x99\xbc\xc3\x8a\x5a\x62\x4e\x5a\x7c\xd3\x89\x5c\x12\xa3\x28\xc9\xf3\x72\x8b\xb9\x36\x30\x14\xb5\x8f\x79\xe0\x13\x26\x0f\x75\xa3\x28\x31\x77\xfa\x2d\x16\x53\xcb\xf5\xdd\x22\x15\xba\xc7\x65\x39\x7d\x52\x73\xdd\x90\xf7\xfa\x89\xdc\xc7\xfc\x31\xd6\x07\x5f\xc8\x0d\xb9\xef\x32\x29\x27\xe6\xc3\x7f\x8b\x9d\x09\xdd\x93\x97\x61\xee\x94\x8f\x5c\x93\x44\x4d\x26\x60\xd6\xa4\x0a\x3b\x3c\x1b\x7e\xbd\x9c\x70\x15\xb8\xeb\x4f\x27\x72\x9f\x30\x18\x2d\x77\x39\x31\xe7\x19\xe6\x64\x80\xf9\x22\xd7\x0f\xf8\xa8\xe5\x7d\x53\x81\xf8\x8b\x21\x56\xd4\x73\xcc\x75\x1f\x78\xd3\x27\xc5\x16\xf3\x85\x74\x80\x7d\xab\x97\xe0\x13\x8c\x31\xd7\x76\x62\xb4\xf9\x05\xbe\x2d\xf8\x3f\xbd\x4a\x25\x99\xc8\x85\x5e\x16\x25\x60\x31\x14\x55\xc2\x5c\x3d\x5f\x9a\x6a\xae\xef\x96\x29\x31\xe4\x61\x3b\xaf\x06\xe4\x70\xb6\xd8\x54\x73\xb2\x0b\x62\xc2\x64\x49\x5f\xa8\x20\x03\x2c\xb9\xbe\x73\xea\xf8\x6a\x4a\xf8\x75\x4e\x14\x27\x25\xdc\xcb\xf5\xc7\xb5\x3e\x35\xe4\x52\x9f\x14\x32\xe6\x2a\xcc\xe5\x16\xf3\xf9\x10\x2b\x7e\x8a\x41\x6e\x14\x3b\x98\x7f\xcc\x17\xed\xfc\x62\x3e\x87\x1a\x25\x5b\x21\x39\xc4\x20\xbb\xd7\x14\xf8\xaa\xea\x9c\x4b\x80\x41\xe7\x6a\x2a\xb8\x0b\xd5\x5c\x57\x3c\x18\x8d\x7f\x86\xf9\xf5\x00\x73\x32\xb4\x27\xf2\x40\x67\xb0\xc6\xae\xfb\x9f\x73\x90\x9c\xec\x96\xb9\x6e\x7a\x30\x0e\xe4\xea\x79\xf5\x5c\xec\xc4\xd8\x73\x5a\x0a\x4e\x15\x1f\xf2\x96\x02\x03\xd4\x5a\x16\xf9\x54\xb9\x1f\x4f\x8d\xe2\xbc\xb6\xdd\xc2\x9e\x21\x7c\x0e\xeb\x74\x4b\xfa\xeb\x8c\x98\x0b\xd8\x5f\x39\x51\xc4\x9e\x19\x92\x52\xda\x2e\x0d\x59\xd2\x4b\x18\x07\x6b\x1e\xe6\x22\x2c\x32\xe0\x7d\x2a\xf8\x56\x25\x0c\x76\x4c\x2a\x31\x57\xfb\xc0\xf3\x54\x51\x61\xbd\xc9\xfa\x42\xcd\x75\x58\x7f\xa6\xb6\xdf\xb7\xe6\x6b\xae\x97\xc5\x96\x0c\x3e\xe9\x32\xcc\xb5\x73\x6c\xc8\x3b\xb2\x28\xb6\x3a\xf0\x0e\xfb\xf3\xa9\xc8\xaa\x39\xb9\xae\x62\x42\x7d\xbb\x79\x4e\xb8\xc0\x59\xc5\x39\xdc\x13\x86\xbc\xd5\x0d\x29\xd7\x55\x88\x2f\xc6\x41\x6e\x2d\xd5\x99\x7c\x4e\x00\x3f\x83\x75\xfc\xe8\x1f\x73\xb2\xcc\x09\x5f\x88\x75\x4f\x5e\x8b\xad\x2e\xd6\x7e\x31\xc0\x5c\x95\x3f\xcf\x0d\xcc\xdf\xb2\xb4\xa1\x5e\xa8\x21\xfc\x5c\x2b\xe6\x4b\x98\x57\xd9\x56\xb4\x6a\x3f\x19\x70\x66\x89\x7d\xb0\xc3\x20\xfb\xbc\x2e\x60\x5d\xc1\x79\x51\x5a\xca\x3c\xd7\xcd\x9b\x63\x7c\xa2\x1e\x4f\x9c\x2d\xd3\x9b\x35\xc4\x2b\xb1\x09\xf3\xe8\x6b\x84\x83\xee\x81\x00\xbf\x53\x03\x30\x2f\x76\x5f\x9e\x59\x1c\xce\x00\x55\x32\x15\x75\x80\xf9\xab\x84\x15\xa7\x3e\x63\x17\xb9\x6e\x3a\xc0\xcf\x6e\xfa\x04\x18\xbd\x12\xce\x8e\xa9\xe2\x8f\xa7\x86\xd8\x7f\xe7\x98\x5f\x0f\xf7\x5c\x69\x7d\x81\x55\xf1\xf2\xa9\x79\x63\xd9\x86\x24\x63\xae\xc9\x58\x51\xfb\x73\x13\xf6\x0f\x91\xaa\x7d\x44\xa4\xbd\xcf\xa2\xce\x05\x3c\xad\x7c\x02\xfb\x94\x6b\x69\xfb\x6c\xf6\x66\x29\x0d\x31\x5f\x4a\xf6\x44\x3e\xc7\x3c\x18\xc3\xba\x9c\x9a\xf3\xb4\x7d\xee\xcf\x58\x38\xd3\x87\x98\x93\x6a\xad\x8a\x71\x78\x1e\xa9\xe2\x7c\xf9\xf4\xee\xe0\x24\x9f\x8a\xbd\x3f\x4e\x31\x7f\xcd\xa7\x0b\x75\x0b\x5c\x12\x58\x97\xd5\xb3\x3d\x4f\xf4\x52\xbc\x03\x4a\x52\xca\xf2\xf4\x26\x66\x78\x27\xff\x70\x6f\x1f\x65\x77\x52\xbd\xdb\x34\x36\x3e\x9f\x19\x9a\xa4\x97\x9a\xb7\x0a\x83\xd4\x56\x24\xa6\xed\xae\x0b\xa2\xc0\xfb\x13\x64\x17\xb9\x3b\xe9\xef\xac\xe7\x75\x30\x33\xb4\xbe\x78\x17\xde\xae\x36\x76\x34\xcf\xdc\xc1\xe3\x7a\x35\xf0\xa5\x99\x71\xcf\xec\xc1\xf6\x55\x63\xe3\xd0\x1e\x9c\x4b\xf8\x69\xe5\xdb\x4f\x41\x4a\x4d\x89\xdd\x4b\x7e\x60\xdf\xad\x02\xf7\x36\xe0\x4b\x63\x3c\x5d\x3d\x3f\x06\xf7\x65\xe1\x19\xb7\x8f\xa9\x1b\x3e\x4a\xd6\x93\xee\xe3\xc9\x78\xec\x84\x81\x6f\x4f\xfa\x8f\x76\x18\x70\x7b\xf0\x10\xec\x65\x85\xb7\x18\xdc\xe4\x4e\xd9\xdf\xad\x9e\xef\xd7\x2b\xa6\xfd\x3e\x1f\xde\x07\xcb\xe7\x87\x60\x35\x19\x33\x6a\x8c\xe7\xd6\x6d\x90\x5a\xcf\xe3\x42\xbb\x19\x07\xee\xdd\x3a\x59\x9a\xc5\x46\xd4\xa8\x7c\x59\x6b\x9f\xb0\xff\x9d\x5a\x57\xd1\xfd\xc6\x36\xc6\x92\x75\xbb\xf0\xcc\xf0\xa2\x6f\xb3\xf1\xdc\x09\x2f\xde\x56\x4f\xba\x04\xf7\x8e\xd5\xb3\x2f\xcd\x78\xb1\x71\x86\xab\x68\xe6\x5d\x5e\x76\x90\x4f\x99\xe7\x67\x97\x9d\x81\xdc\x41\x05\x73\x33\xbf\xfa\x99\xb1\x0c\xfa\x8e\x47\x46\x8b\xaa\xc9\xab\x9a\x46\x16\xa1\xcc\xa7\xe8\xc9\x8f\xff\x95\xa2\x69\x84\x6e\xe0\xc2\x86\x8c\xf6\x52\x86\x7a\x57\xa3\x9e\x55\x5f\x1e\xc5\x55\xb2\x57\xdd\x25\xdb\x5b\xbb\xfb\x17\x17\xdd\x2e\x73\xdb\x66\xe2\xf8\xb6\xdb\x82\x59\xc5\x71\x08\x4d\xdc\x01\x9e\xb8\xc2\x23\x7a\x96\x83\x60\x22\xeb\xdf\xe4\x8b\xac\x90\x36\x4e\xd0\x39\xfc\x43\xb7\x75\xd3\x53\x34\xbe\x6d\x93\xf1\x0f\x03\x24\xa2\xfd\x10\xde\x75\x9f\xc0\xa1\x4f\xf0\xa0\x51\xb8\x8e\x1c\x9a\x66\x71\x92\x42\xe3\xd0\xa9\x2d\xd1\xc7\x87\xf0\xf7\x1a\x98\x07\xad\xb6\x20\xf7\x6f\x12\x3a\x55\x6b\xf3\x6b\x46\xe7\x73\xc2\xc6\xb2\xce\xe8\x7c\x9d\xf0\x6f\xd2\x05\x75\xd7\xd4\xf0\xd3\x36\x21\x4d\x3b\xf5\x4f\xe3\x34\x8d\xd6\xe7\x40\x8d\xe6\x20\xd2\x17\x5d\x58\xf3\xdd\x01\xd6\x20\x34\x9d\x5f\x74\xeb\x07\x56\x55\xb3\x73\xf4\xb9\xa2\xb2\x3b\x3d\x70\x3a\xf6\x69\xbe\x28\xed\x3f\x38\xbd\xc4\x71\xd6\x7e\x70\xda\x1b\xfe\x27\x00\x00\xff\xff\x9c\x35\xbf\x4b\xab\x12\x00\x00")

func templatesHtmlSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearchHtml,
		"templates/html/search.html",
	)
}

func templatesHtmlSearchHtml() (*asset, error) {
	bytes, err := templatesHtmlSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search.html", size: 4779, mode: os.FileMode(420), modTime: time.Unix(1585356503, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/search.html":   templatesHtmlSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"search.html":   &bintree{templatesHtmlSearchHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
