// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/search.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xe2\xb4\xd1\x4f\xc9\x2c\xb3\xe3\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x01\x04\x00\x00\xff\xff\x1a\x92\x03\x62\x3a\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 58, mode: os.FileMode(420), modTime: time.Unix(1567012776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x94\xb1\x8e\xdb\x30\x0c\x86\x67\xfb\x29\x08\x16\xe8\xe6\xf8\x7a\x43\x97\xda\xde\xfa\x00\x45\x9f\x80\xb6\x99\x58\xa9\x4c\x05\x22\x9d\x36\x30\xf2\xee\x85\xa2\x24\xbd\xa0\xb7\x14\xd7\x5b\x2c\x82\x22\x3f\xfe\xfa\x2d\x68\x5d\x61\xe4\xad\x13\x06\x9c\x98\x46\x8e\x08\xe7\x73\xd9\x4c\x36\xfb\xae\x04\x00\x68\x52\xba\x2b\x8b\xc6\x9c\x79\xee\x9a\x3a\xaf\x65\xd1\xe8\x10\xdd\xc1\xc0\x4e\x07\x6e\xd1\xf8\x97\xd5\x7b\x3a\x52\xce\x22\x68\x1c\x5a\xfc\x93\xa8\x7f\x4e\x41\x83\x6c\x5d\x54\xdb\x2c\xd1\x6d\xf6\x8a\x5d\x53\xe7\xcd\xb7\xd1\x84\xed\x3f\xd2\x76\x1c\xf6\x1a\xe4\x91\x58\x14\xff\xcc\x3c\x78\x1a\x78\x0a\x7e\xe4\xb8\x19\xbc\x63\xb1\xcd\x4c\x07\x7d\xa3\xd2\x57\xa8\x91\x75\xf1\xf6\x0e\x60\x27\xee\x6f\x63\xbd\x93\x1f\x2f\x99\x83\x2a\x42\x64\xdf\xa2\xda\xc9\xb3\x4e\xcc\x86\x30\x45\xde\xb6\x38\xa8\xbe\xc6\xbd\xb4\xd4\xd7\xdb\x55\xe7\xeb\x75\x89\xfb\x30\x9e\xd2\x8c\xd1\x1d\x61\xf0\xa4\xda\xe2\x10\xc4\xc8\x09\x47\xec\xca\xb2\xb8\x54\x09\xdd\x77\x85\x8e\x3d\x45\xc8\x4b\xe5\xdd\x6e\x32\xe8\x77\x39\xb8\x34\x14\x0d\x3d\xd6\x56\x7d\x24\x19\xb1\xfb\xf8\xe1\xd3\xe7\xa7\x2f\x4d\x4d\xb9\x6a\x1b\xe2\x7c\x2b\x4c\x71\xe5\xc4\x3b\x61\xec\xca\x22\x0f\x75\x72\x58\xec\xa1\x22\x29\x8b\xc1\xc3\x1c\x2b\x9d\xab\x67\xbc\x9a\xa2\x4c\x71\x98\x10\x84\xe6\xab\x45\x08\x6e\xbc\x45\x2f\xdc\x68\xf1\xab\x18\x47\xa0\x9c\xbc\x34\x80\x05\xc8\x00\xd8\x86\x88\x70\x24\xbf\x70\x8b\xeb\x0a\x9b\x6f\x0b\xc7\x13\x9c\xcf\x08\x14\x1d\x55\x9e\xfa\xe4\xf9\xf7\x3c\xed\x2e\xb3\x5f\xcc\x82\xdc\x74\xf6\x26\xd0\x9b\x54\x61\xb1\x74\x9a\x4a\x97\x61\x60\x55\x98\x4f\xd5\x73\xfa\xe8\x5c\x3d\xdd\x75\x2f\xfd\xec\x0c\xbb\x4c\x6c\xea\x4c\x4a\xe0\xa6\x4e\xe7\x4d\xd1\xf5\x07\xd4\x42\xc7\xae\x2c\xca\x75\x05\x96\x31\x3d\x17\xbf\x03\x00\x00\xff\xff\xab\x6d\xdd\x4e\x45\x04\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1093, mode: os.FileMode(420), modTime: time.Unix(1567022997, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\xcb\x52\xe3\xba\xd6\x1e\xc3\x53\xe8\xcf\xdf\xb5\xcf\x60\xef\x10\x27\x31\x5d\x4d\xef\xc0\x29\x12\x1b\x30\x25\x39\x09\x76\x80\x64\xe6\x8b\xb0\x25\x7c\x49\xfb\x12\xc7\xa6\x78\xf7\x53\x4b\x8e\x9d\xa4\xa1\xcf\xee\xe9\x19\x08\x87\x75\xd3\xb7\x3e\x49\xcb\x5a\x7e\x7b\x43\x2e\x7d\x61\x11\x45\x9d\x94\x5a\x89\xe3\x77\xd0\xfb\xfb\xe9\xdb\x1b\xca\x68\xb8\x0e\xac\x8c\xa2\x8e\x4f\x2d\x97\x26\x1d\x74\x06\x1a\x84\x10\x02\x35\x7b\x41\x67\xf3\x9c\x26\x25\x08\x41\xf0\x25\xa0\x91\x97\xf9\xe8\xfb\x25\x92\x76\x32\xb0\x79\xa0\x69\x1e\x64\xe9\x2e\x68\x63\x74\x89\x02\x1a\xfd\xac\xa4\x91\x2b\x1c\x61\x8a\x91\xcb\x36\xc8\x09\xac\x34\xbd\xec\x38\x56\xe2\x76\xae\x4e\x4f\x4e\x4f\x46\xfe\xf0\x50\xd8\xdd\x21\xbb\x3a\x3d\x01\x9f\x1a\x4e\xb2\x8b\xf9\x12\x27\x68\xf4\xe3\xea\xed\x6d\x8f\x73\xd4\xfb\xb1\x33\xad\x13\x88\x68\x0b\x48\x40\x16\xaa\x51\x1a\x5a\x41\x70\x55\x5b\xd0\x1f\xad\x45\x1f\xbd\xbf\x9b\x3e\x4d\x28\x62\x29\x8a\x23\x8a\xd6\x81\xe5\x50\x14\x5a\x99\xe3\xb3\xc8\x43\x99\xcf\x52\xf4\x03\x66\x82\x54\x82\x94\xb6\xf6\x56\x42\xd1\x41\xee\xef\xef\xb5\x6b\xfa\x2b\x5f\x41\xc3\xa8\x57\xe3\x68\xf1\xee\xd8\x39\x19\xf5\xfc\xe1\xd5\xe9\xe9\xc9\xcf\x0c\x75\xed\xd8\x2d\x1b\x2a\x1a\x2f\xf6\x82\xd0\x99\x9a\x24\x71\xd2\xe6\xb7\xcb\xf2\xc0\xdb\x0a\x68\x92\x21\xf1\xb7\x5b\x58\x49\xc4\x22\xaf\x83\x92\x38\xa0\x3b\x15\x04\x3d\x19\xad\xaf\x16\x91\x65\x07\x14\x65\x31\x72\xe2\x70\x1d\xd0\x8c\xd6\x98\x51\x9a\x3b\x0e\x4d\xd3\x97\x3c\x08\xca\x33\x54\x4f\x97\xd0\x75\x9c\x64\xd4\x45\x2c\xfd\x3e\xea\xad\x45\x08\x27\x76\xa9\x58\x90\x06\xd1\xa8\x27\x44\x3b\x48\x3d\x97\x6d\x7e\xc2\xdf\x10\x79\x7a\xb8\x6c\x07\x8b\x22\xed\x75\xbf\xca\x88\x45\x2f\xf1\xa7\xe9\xec\x17\x27\x8a\x3f\x59\x11\x2b\xab\xb3\x3b\xab\xd1\x1f\x20\xfc\x00\xee\x67\x5e\x99\x7b\xd9\x09\xad\x75\xe7\xea\x63\x4a\xad\x7e\xb7\x4d\xbb\x19\x70\xda\x69\x80\x8b\xff\xba\x09\x4d\xd7\x71\x94\xb2\x0d\xad\xb1\x0a\xe9\x91\x09\xaa\x0d\xfd\x78\x53\x6f\xff\x3a\x76\x96\xc0\xcf\x93\x51\xe6\x5f\xfd\xf1\xff\xfd\xaf\xd2\xdf\xa3\x5e\xe6\xb7\x22\x4d\x39\xfa\x57\xb7\x42\x7a\x24\x98\x01\x05\x59\xb9\x3e\x96\x3e\x50\x8f\xc5\x91\x10\x9d\x9c\x34\xc2\x49\x9c\x47\x59\x52\x1e\x19\x62\x2b\x63\x59\xee\x1e\x7b\xe3\x38\xf2\xf6\x52\x11\xa0\x26\xb2\x86\xba\xe3\x31\xb1\x22\x8f\xa2\x2f\xec\x2f\xf4\x25\x81\xfa\x71\x58\x17\xda\xd4\x9a\xfc\x6b\xe2\x3a\x07\x24\x76\xe1\x70\x25\x67\x1a\x9c\x8f\x0e\x72\xad\xcc\xea\x16\x7e\x9c\xc6\xd1\x0b\x4b\xd2\xac\x0b\x86\x1f\x2d\xec\x38\x8f\x5c\x16\x79\x5d\x3b\xde\x36\xfa\x5b\x1a\x87\x34\x4b\xca\xb3\xf1\x4e\x39\x8e\xb7\xe0\xd1\xa6\x73\x0a\x3f\x76\xa0\xaf\x5d\x17\x7d\x61\xa2\x2c\x34\xd2\xe6\x39\xfa\xbf\x6e\x17\xf9\x59\xb6\x4e\xbf\xf7\x7a\x99\x4f\xa3\x38\x8f\xd6\x49\xcc\xa9\x93\x9d\x39\x71\xd8\xab\x0b\x6d\xef\xdf\x3f\x2e\xbd\x20\xb6\xe9\x1f\xec\x72\xf0\xad\x7f\xf1\xed\xeb\x57\xd4\xed\x5e\xb5\x41\x2c\xe4\x27\xf4\xe5\xb2\xd3\x04\x4a\xd7\x34\xc8\xa3\x57\x9a\x9c\x1d\x64\x77\x16\x27\x5e\x8f\xb9\xbd\xa3\x04\x33\x2b\xf1\x68\x76\xd9\x69\x3d\x3a\x57\x23\x16\x7a\x28\x4d\x9c\xcb\x0e\x64\xff\x9d\x85\x96\x47\x7b\xe9\xc6\xfb\x73\x1b\x06\x7f\xdb\x56\x4a\xbf\xca\x7f\xcd\xee\xf4\xc1\xaa\x1c\xcb\xf6\xd3\x36\x77\x2a\x89\x59\x77\x0f\x92\xa3\xc4\x1b\x3c\x74\x87\x6e\x79\x3e\x24\xe5\xf9\xc6\x09\x9d\x0d\xe1\xd7\x05\x99\x5c\x54\x6e\xe8\x30\xed\xf6\xc1\x77\x6f\xd5\xcc\x0e\x6f\xb2\x95\x29\x31\x63\xa1\xcf\x4c\x36\x9e\xcc\x17\x5b\xc5\x28\x35\xcf\x0d\x83\xc0\x95\xee\x37\x54\x91\x18\x99\x5c\x17\x9a\x42\x4a\x4d\x99\x17\x1a\x1b\xcb\x33\x43\x2b\x9c\x3b\x8f\x69\x77\xaf\x17\x1a\x1f\x17\x74\xa2\xfd\x39\xbb\x7b\x58\xbb\xb7\xdb\x60\x16\xba\xa9\x3d\xb8\x0f\x66\x93\x0b\xc9\x7a\x7e\x48\x57\xa6\xfc\xcd\xb9\xbd\x91\xac\xc9\xf8\x75\x66\xdc\xeb\x84\xcf\xf3\xa9\xa2\xa6\xc4\x0c\x7c\x62\x5e\xa7\x62\x4c\x8a\x02\x2b\xd7\x29\x61\x72\x35\x9d\x48\x03\xcc\xe7\x32\x56\x5e\x85\xdd\xd4\x90\x65\x62\xec\xf4\x13\x29\xd7\xcd\x65\x46\x4a\xb9\xd4\x4b\xb9\xaf\x33\x18\x8d\xae\x28\xb0\x21\x6f\x09\x2b\xb6\x64\x22\x46\xe3\xb3\xd5\x99\x5c\x62\x73\x9e\x13\x65\x45\xa6\x60\x53\x16\x15\xe6\x5e\x7f\x69\xc8\x7d\x22\xc6\x41\xfc\x4a\x4d\x85\x3f\x93\x2b\xac\xa8\x25\xe6\xa4\xc5\x37\x9d\xc8\x25\x31\x8a\x92\x3c\x2f\xb7\x98\x6b\x03\x43\x51\xfb\x98\x07\x3e\x61\xf2\x50\x37\x8a\x12\x73\xa7\xdf\x62\x31\xb5\x5c\xaf\x16\xa9\xd0\x3d\x2e\xcb\xe9\x93\x9a\xeb\x86\xbc\xd7\x4f\xe4\x3e\xe6\x8f\xb1\x3e\xf8\x44\x6e\xc8\x7d\x97\x49\x39\x31\x1f\xfe\x5b\xec\x4c\xe8\x9e\xbc\x0c\x73\xa7\x7c\xe4\x9a\x24\x72\x32\x01\xb3\x26\xd5\xd8\xe1\xd9\xf0\xeb\xe5\x84\xab\xc0\x5d\x7f\x3a\x91\xfb\x84\xc1\x68\xb9\xcb\x89\x39\xcf\x30\x27\x03\xcc\x17\xb9\x7e\xc0\xc7\x4e\xde\x37\x15\x88\xbf\x18\x62\x45\x3d\xc7\x5c\xf7\x81\x37\x7d\x52\x6c\x31\x5f\x48\x07\xd8\xb7\x7a\x09\x3e\xc1\x18\x73\xad\x12\xa3\x9d\x5f\xe0\xdb\x82\xff\xd3\xab\x54\x92\x89\x5c\xe8\x65\x51\x02\x16\x43\x51\x25\xcc\xd5\xf3\xa5\xa9\xe6\x7a\xb5\x4c\x89\x21\x0f\xdb\x75\x35\x60\x0e\x67\x8b\x4d\x35\x27\x55\x10\x13\x26\x4b\xfa\x42\x05\x19\x60\xc9\xf5\xca\xd9\xc5\x57\x53\xc2\xaf\x73\xa2\x38\x29\xe1\x5e\xae\x3f\xae\xf5\xa9\x21\x97\xfa\xa4\x90\x31\x57\x61\x2d\xb7\x98\xcf\x87\x58\xf1\x53\x0c\x72\xa3\xa8\x60\xfd\x31\x5f\xb4\xeb\x8b\xf9\x1c\x72\x94\x6c\x85\xe4\x10\x83\x54\xaf\x29\xf0\x55\xe7\x39\x97\x00\x83\xce\xd5\x54\x70\x17\xaa\xb9\xae\x78\x30\x1a\xff\x0c\xf3\xeb\x01\xe6\x64\x68\x4f\xe4\x81\xce\x60\x8f\x5d\xf7\x3f\xce\x41\x72\x52\x2d\x73\xdd\xf4\x60\x1c\xc8\xd5\xf3\xfa\xb9\xa8\xc4\xd8\x73\x5a\x0a\x4e\x15\x1f\xe6\x2d\x05\x06\xc8\xb5\x2c\xf2\xa9\x72\x3f\x9e\x1a\xc5\xf9\xce\x76\x0b\x67\x86\xf0\x39\xec\xd3\x2d\xe9\xaf\x33\x62\x2e\xe0\x7c\xe5\x44\x11\x67\x66\x48\x4a\x69\xbb\x34\x64\x49\x2f\x61\x1c\xec\x79\x58\x8b\xb0\xc8\x80\xf7\xa9\xe0\x5b\x95\x30\xd8\x31\xa9\xc4\x5c\xed\x03\xcf\x53\x45\x85\xfd\x26\xeb\x0b\x35\xd7\x61\xff\x99\xda\xfe\xdc\x9a\xaf\xb9\x5e\x16\x5b\x32\xf8\xa0\xcb\x30\xd7\xce\xb1\x21\x57\x64\x51\x6c\x75\xe0\x1d\xce\xe7\x53\x91\xd5\x6b\x72\x5d\xc7\x84\xfc\xaa\x79\x4e\xb8\xc0\x59\xc7\x39\x3c\x13\x86\xbc\xd5\x0d\x29\xd7\x55\x88\x2f\xc6\xc1\xdc\x5a\xaa\x33\xf9\x9c\x00\x7e\x06\xfb\xf8\xd1\x3f\xe6\x64\x99\x13\xbe\x10\xfb\x9e\xbc\x16\x5b\x5d\xec\xfd\x62\x80\xb9\x2a\x7f\x5c\x1b\x58\xbf\x65\x69\x43\xbe\x90\x43\xf8\x31\x57\xcc\x97\xb0\xae\xb2\xad\x68\xf5\x79\x32\xa0\x66\x89\x73\x50\x61\x90\x7d\xdc\x17\xb0\xaf\xa0\x5e\x94\x96\x32\xcf\x75\xf3\xe6\x18\x9f\xc8\xc7\x13\xb5\x65\x7a\xb3\x86\x78\x25\x36\x61\x1d\x7d\x8d\x70\xd0\x3d\x10\xe0\x77\x6a\x00\xe6\x45\xf5\x69\xcd\xe2\x50\x03\x54\xc9\x54\xd4\x01\xe6\xaf\x12\x56\x9c\x5d\x8d\x5d\xe4\xba\xe9\x00\x3f\xd5\xf4\x09\x30\x7a\x25\xd4\x8e\xa9\xe2\x8f\xa7\x86\x38\x7f\xe7\x98\x5f\x0f\xf7\x5c\x69\x7d\x81\x55\xf1\xf2\xa9\x79\x63\xd9\x86\x24\x63\xae\xc9\x58\x51\xfb\x73\x13\xce\x0f\x91\xea\x73\x44\xa4\xbd\xcf\x62\x37\x17\xf0\xb4\xf2\x09\x9c\x53\xae\xa5\xed\xb3\x39\x9b\xa5\x34\xc4\x7c\x29\xd9\x13\xf9\x1c\xf3\x60\x0c\xfb\x72\x6a\xce\xd3\xf6\xb9\xaf\xb1\x50\xd3\x87\x98\x93\x7a\xaf\x8a\x71\x58\x8f\x54\x51\x5f\x3e\xbc\x3b\x38\xc9\xa7\xe2\xec\x8f\x53\xcc\x5f\xf3\xe9\x42\xdd\x02\x97\x04\xf6\x65\xfd\x6c\xeb\x89\x5e\x8a\x77\x40\x49\x4a\x59\x9e\xde\xc4\x0c\x57\xf2\x37\xf7\xf6\x51\x76\x27\xf5\xbb\x4d\x63\xe3\xf3\x99\xa1\x49\x7a\xa9\x79\xab\x30\x48\x6d\x45\x62\x5a\x75\x5d\x10\x05\xde\x9f\x20\xbb\xc8\xdd\x49\xbf\xb2\x9e\xd7\xc1\xcc\xd0\xfa\xe2\x5d\x78\xbb\xda\xd8\xd1\x3c\x73\x07\x8f\xeb\xd5\xc0\x97\x66\xc6\x3d\xb3\x07\xdb\x57\x8d\x8d\x43\x7b\x70\x2e\xe1\xa7\x95\x6f\x3f\x05\x29\x35\x25\x76\x2f\xf9\x81\x7d\xb7\x0a\xdc\xdb\x80\x2f\x8d\xf1\x74\xf5\xfc\x18\xdc\x97\x85\x67\xdc\x3e\xa6\x6e\xf8\x28\x59\x4f\xba\x8f\x27\xe3\xb1\x13\x06\xbe\x3d\xe9\x3f\xda\x61\xc0\xed\xc1\x43\xb0\x97\x15\xde\x62\x70\x93\x3b\x65\xbf\x5a\x3d\xdf\xaf\x57\x4c\xfb\x73\x3e\xbc\x0f\x96\xcf\x0f\xc1\x6a\x32\x66\xd4\x18\xcf\xad\xdb\x20\xb5\x9e\xc7\x85\x76\x33\x0e\xdc\xbb\x75\xb2\x34\x8b\x8d\xc8\x51\xf9\x34\xd7\x3e\x61\xff\x3b\xb9\xae\xa2\xfb\x8d\x6d\x8c\x25\xeb\x76\xe1\x99\xe1\x45\xdf\x66\xe3\xb9\x13\x5e\xfc\x58\x3d\xe9\x12\xdc\x3b\x56\xcf\xbe\x34\xe3\xc5\xc6\x19\xae\xa2\x99\x77\x79\xd9\x41\x3e\x65\x9e\x9f\x5d\x76\x06\x72\x07\x15\xcc\xcd\xfc\xfa\x67\xc6\x32\xe8\x2e\x1e\x19\x2d\xea\x56\xae\x6e\x0d\x59\x84\x32\x9f\xa2\x27\x3f\xfe\x57\x8a\xa6\x11\xba\x81\x0b\x1b\x32\xda\x4b\x19\xea\x5d\x8d\x7a\xd6\x55\x7d\xdf\x13\x57\xcb\x83\xbb\xb3\xfb\x8b\x0b\x6e\x97\xb9\x6d\xb7\x70\x7c\xcb\x6d\x71\xac\xe2\x38\x84\x2e\xed\x00\x4a\x5c\x43\x11\x4d\xc9\x41\xb0\x51\x2f\x73\xff\x69\xbe\xc8\x0a\x69\xe3\x04\x3d\xc3\x6f\xba\xad\x9b\x6e\xa2\xf1\x6d\xdb\x8b\xdf\x0c\x90\x88\xc6\x43\x78\xef\xfa\x03\x0e\xfd\x81\x07\x0d\xc2\x75\xe4\xd0\x34\x8b\x93\x14\x1a\x86\xce\xce\x12\xbd\xbf\x0b\x7f\xaf\x81\x79\xd0\x4b\x67\x6e\xdb\xbd\xfc\x72\x42\xa7\x6e\x6a\x7e\x9e\xd1\xf9\x38\x61\x63\xb9\x9b\xd1\xf9\x7c\xc2\x7f\x98\x2e\xd8\xf5\x4b\x0d\x3f\x6d\xf3\xd1\x34\x52\xbf\x1b\xa7\x69\xb1\x3e\x06\x6a\x34\x47\x14\x7c\xd2\x7f\x35\x9f\x16\x60\xff\x41\x5f\xf9\x49\x43\x7e\x60\x55\x77\x3a\x47\x5f\x24\x6a\xbb\xd3\x03\xa7\x63\x9f\xe6\xa3\xd1\xfe\x9b\xd2\x4b\x1c\x67\xed\x37\xa5\xbd\xe1\x7f\x02\x00\x00\xff\xff\x9b\x5c\xf1\x46\x8e\x12\x00\x00")

func templatesHtmlSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearchHtml,
		"templates/html/search.html",
	)
}

func templatesHtmlSearchHtml() (*asset, error) {
	bytes, err := templatesHtmlSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search.html", size: 4750, mode: os.FileMode(420), modTime: time.Unix(1567026462, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/search.html": templatesHtmlSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"search.html": &bintree{templatesHtmlSearchHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

