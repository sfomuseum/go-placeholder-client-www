// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/search.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xe2\xb4\xd1\x4f\xc9\x2c\xb3\xe3\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x01\x04\x00\x00\xff\xff\x1a\x92\x03\x62\x3a\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 58, mode: os.FileMode(420), modTime: time.Unix(1567012776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x41\x8e\xdb\x30\x0c\x45\xd7\xf6\x29\x08\x16\xe8\x4e\xd1\x74\x16\xdd\x54\xf6\xae\x07\x28\x7a\x02\x5a\x66\xc6\x9a\xca\x72\x20\xd2\x41\x03\x23\x77\x2f\x64\x25\xe9\x0c\xda\x65\xbb\xb1\x3e\xe8\xcf\x47\xea\x1b\xde\x36\x18\xf9\x18\x12\x03\x4e\x4c\x23\x67\x84\xeb\xb5\x75\x93\xce\xb1\x6f\x01\x00\x5c\x29\xf7\x6d\xe3\x34\x68\xe4\xde\xd9\x7a\xb6\x8d\x13\x9f\xc3\x49\x41\x2f\x27\xee\x50\xf9\xa7\xda\x57\x3a\x53\xad\x22\x48\xf6\x1d\xfe\x2e\xd8\x53\x24\xcf\xd3\x12\x47\xce\x07\x1f\x03\x27\x3d\xcc\x74\x92\xc3\xab\x60\xef\x6c\x35\xfd\x13\x6a\x66\x59\xa3\xfe\x07\x70\x48\x41\xff\xa0\xc6\x90\x7e\xbc\x65\x7a\x11\x84\xcc\xb1\x43\xd1\x4b\x64\x99\x98\x15\x61\xca\x7c\xec\xd0\x8b\xfc\x8d\xbb\xb7\xd8\x5b\xda\xb6\xc6\xbd\xeb\x61\x19\x2f\x65\xc6\x18\xce\xe0\x23\x89\x74\xe8\x97\xa4\x14\x12\x67\xec\xdb\xb6\xd9\x5d\x89\x1e\x6f\x13\x9d\x07\xca\x50\x0f\x13\xc3\xcb\xa4\x30\xbc\x54\xb1\x37\x34\x8e\xde\x7b\xcd\x90\x29\x8d\xd8\x7f\xfc\xf0\xe9\xf3\xd3\x17\x67\xa9\xba\x8e\x4b\x9e\xef\xc6\xa2\x4d\x48\x31\x24\xc6\xbe\x6d\xea\xd0\x90\x4e\xab\xbe\x73\x94\xcd\xf2\x12\x61\xce\x46\x66\xf3\x8c\xb7\x50\x84\x29\xfb\x09\x21\xd1\x7c\x8b\x08\x21\x8c\x77\xf5\x26\x8d\x0e\xbf\x26\xe5\x0c\x54\x8b\x7b\x03\xe8\x02\x15\x00\xc7\x25\x23\x9c\x29\xae\xdc\xe1\xb6\xc1\xe1\xdb\xca\xf9\x02\xd7\x2b\x02\xe5\x40\x26\xd2\x50\x32\xff\x5e\xa7\x3d\xd6\x1c\x56\xd5\x25\xdd\xf7\x1c\x34\xc1\xa0\xc9\x2c\xab\x96\xdb\x18\x59\xbd\x67\x11\x98\x2f\xe6\xb9\x3c\x64\x36\x4f\x8f\xbd\xd7\x61\x0e\x8a\x7d\x25\x3a\x5b\x49\x05\xec\x6c\xb9\x6f\x51\xb7\x0f\x60\x13\x9d\xfb\xb6\x69\xb7\x0d\x38\x8d\xe5\xf7\xf9\x15\x00\x00\xff\xff\x9c\x51\xc6\x17\x55\x03\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 853, mode: os.FileMode(420), modTime: time.Unix(1567016996, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x54\xdd\x6e\x9c\x3c\x10\xbd\x86\xa7\x18\x59\xb9\xfc\x80\x8b\xdc\x45\x2c\xd2\x97\xb6\xaa\x22\x45\x55\x1b\xa9\x0f\xe0\xc5\x03\xb8\xf5\xda\x64\x6c\x36\x59\xa1\x7d\xf7\xca\x06\xef\x42\x76\xab\xa4\x37\x08\xcf\xcf\x99\x33\x73\xc6\x1e\x47\x10\xd8\x48\x8d\xc0\x2c\x72\xaa\x3b\x06\xc7\x63\x3a\x8e\xe0\x70\xd7\x2b\xee\x10\x58\x87\x5c\x20\x31\xc8\xbd\x07\x00\xc0\xbb\x65\x03\xf9\x8f\x01\xe9\x10\x8d\xa5\x90\x7b\xa8\x15\xb7\x76\xc3\x6a\x4e\x82\x55\x69\x92\x26\x65\x77\xbb\x34\x66\x33\x56\x35\xa5\x12\xda\x41\x39\x0b\x8d\x21\x28\x9f\xab\x71\x3c\x63\x96\xc5\x73\x55\x16\xdd\x6d\x95\xa6\xc9\x5b\xe8\x6c\x6b\xc4\xc1\xe3\x07\x32\xe1\x3b\x8e\xb2\x01\xc8\xbf\x10\x19\xf2\x8c\x16\xae\x65\x36\x57\x48\x0e\xc2\x37\x7b\xe1\xa4\xa5\x6e\x19\x90\x51\x38\xbb\x3c\x68\x52\xf6\xd5\x4f\xcd\xb7\x0a\xc1\x19\xa8\xcd\xae\x57\xe8\x10\x9e\x03\x31\x3b\xd4\x35\x5a\xdb\x0c\x4a\x1d\x72\x98\xca\x11\xf6\x86\x1c\x0a\x90\xf6\xae\x2c\xfa\x00\x51\x1b\x81\xa1\x9f\xc8\xa8\x2c\x82\x69\xa6\x54\x08\xb9\x7f\xc3\x1f\x50\x59\xbc\x46\x5d\x8a\x0d\xdb\xf1\x9e\x55\x97\x59\x27\xff\x3c\xc8\xcc\x79\xda\x2c\x76\x1b\x4e\x19\xa1\xed\x8d\xb6\x72\x8f\x53\x77\xc1\xba\x0a\x81\x29\xb0\x33\x7b\x2f\x4d\x9a\x4c\xd8\x8e\xfc\x6f\x52\xba\xae\x7a\xf8\x5c\x16\xae\x3b\x1d\xbf\xf1\x1d\xae\x0c\xdf\x15\xaf\xd1\x1d\xfa\xb5\xf5\x09\x5b\x69\x74\x30\x25\x49\x34\x7e\x32\x83\x76\x74\x58\x05\x3e\x72\x27\xdd\x20\xd6\xd9\x8f\x46\xb7\x67\x6b\x00\x98\x46\x37\xf1\x9a\x87\x46\x5c\xb7\x08\x37\xf2\x3f\xb8\x21\xb8\xdb\x40\xfe\x34\xaf\x94\x1f\x64\xec\x23\x36\x3b\x4d\x89\x2d\x26\x96\x8d\x23\xdc\x50\xfe\x20\xe0\x78\x64\x20\xb8\xe3\xd9\x4b\x67\xac\xd1\x8d\x24\xeb\x32\x1f\x78\x19\xb1\x35\x83\x16\x52\xb7\xd9\xd6\xbc\x46\xff\x57\x34\x3b\x74\x74\xc8\xef\x67\xe7\xbd\x79\xf5\x19\x73\x3b\xa2\x2a\x39\x74\x84\xcd\x86\x75\xce\xf5\xf6\xae\x28\x6c\x8f\x6a\xd0\xbf\x91\xf2\x45\xc5\xdc\x50\x5b\x48\x51\x2c\x8b\x56\x8b\x43\x59\xf0\xaa\x2c\x9c\x88\xb0\x7f\x69\x25\xd3\x7c\x87\x31\xd1\xab\x15\x52\xdf\x4f\xeb\xa3\x8e\x31\xf7\x24\xec\x07\x01\xea\x49\xdd\x90\x3e\x4b\xf3\xcb\x4b\xd3\x7a\x6d\xfe\xd7\x35\x5a\x67\xc8\x7a\xad\x18\x85\xed\xf0\xaf\x4d\x00\x68\x23\x4f\x7f\x13\xb4\x88\xf5\xe2\xe2\xfc\x6b\xc5\xfa\xb2\x60\x8c\x9c\x2b\xd6\xd7\x0b\xbe\x53\x4e\xcd\xab\x1a\x07\x74\xd2\x3d\xee\xf0\x47\x71\xe2\x76\x5f\x02\x45\xcf\x6a\x04\x57\x56\x7f\x22\xed\x6f\x74\x11\xee\xef\xd5\xb7\x65\x11\x17\x1d\xe9\x22\x6a\x0d\x15\xdf\xf6\xf3\xd3\xdf\x18\xe3\x4e\x4f\xff\x39\xf0\x4f\x00\x00\x00\xff\xff\x71\x5c\x1f\x1a\x35\x06\x00\x00")

func templatesHtmlSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearchHtml,
		"templates/html/search.html",
	)
}

func templatesHtmlSearchHtml() (*asset, error) {
	bytes, err := templatesHtmlSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search.html", size: 1589, mode: os.FileMode(420), modTime: time.Unix(1567019397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/search.html": templatesHtmlSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"search.html": &bintree{templatesHtmlSearchHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

