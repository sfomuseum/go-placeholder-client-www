// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/search.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xc9\x01\x02\x00\x00\xff\xff\x35\xa4\x0d\x91\x32\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 50, mode: os.FileMode(420), modTime: time.Unix(1566839780, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\xca\x48\x4d\x4c\x49\x2d\x52\x52\xa8\xad\xe5\xb2\xc9\x28\xc9\xcd\xb1\xe3\x52\x50\x50\x50\xb0\x01\x09\xdb\x71\x71\xda\x94\x64\x96\xe4\xa4\xda\xd9\xe8\x43\x68\x88\x9c\x3e\x44\x12\xcc\x4e\xca\x4f\xa9\xb4\xe3\xaa\xae\x56\x48\xcd\x4b\x01\x99\x01\x08\x00\x00\xff\xff\xc6\xc9\x76\x22\x5a\x00\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 90, mode: os.FileMode(420), modTime: time.Unix(1566839804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\x52\xb1\x8e\xdb\x30\x0c\x9d\xe3\xaf\x20\xb8\x27\x1e\x6e\x2b\x6c\x6f\x41\xe7\xa2\xed\x07\xc8\x16\x7d\x16\x20\x4b\x2a\x45\xe5\x1a\x08\xf9\xf7\x42\x72\x9c\xe4\x0e\xe8\x22\x10\x7c\x8f\xe4\xe3\xa3\x72\x06\x4d\xb3\x71\x04\x18\x49\xf1\xb4\x20\xdc\x6e\x4d\xce\x20\xb4\x06\xab\x84\x00\x17\x52\x9a\x18\xe1\x54\x90\x4e\x9b\x0b\x4c\x56\xc5\xd8\xe3\xe4\x9d\x28\xe3\x88\x71\x68\x1a\x00\x80\x57\x90\xfd\x07\x0e\xcd\xa1\x9b\x3d\xaf\x7b\xae\xc4\x47\xe3\xac\x71\x84\xb0\x92\x2c\x5e\xf7\xf8\xfd\xfc\xab\x10\xbf\xd6\x57\xee\x3b\xfb\x14\x0a\x7a\xe8\x8c\x0b\x49\x40\xae\x81\x7a\x14\xfa\x2b\xf8\x89\x58\xa4\xb0\xb7\x08\x4e\xad\x0f\x82\xd1\x7b\x14\xac\x9a\x68\xf1\x56\x13\xf7\x78\x76\x42\x0c\x6a\x4b\xd6\x02\x10\x0f\xdb\xf6\x30\x7b\x46\xb8\x28\x9b\xa8\xc7\x9c\xe1\xf4\x23\x11\x5f\xe1\x76\x43\x68\x87\xae\xad\x22\x76\xb1\xad\x36\x97\x3d\x1e\x93\x88\x77\x77\x79\x31\x8d\xab\x79\x0a\x1c\xc5\xc1\x28\xee\x18\xd8\xac\x8a\xaf\x38\xfc\xac\xa3\xba\x76\x2b\x2a\x26\xb5\x65\x89\xa1\x79\x69\x5b\xc2\x72\x06\x33\x3f\x35\xfc\xcf\xe3\xe6\xd0\x2d\x6f\xc3\xc6\x62\x8a\xc9\x4a\x2c\x7b\xc0\xab\xfe\xae\x5d\xde\x2a\x35\x67\x33\x03\x9c\xce\xcc\x9e\x4b\xcf\xc3\x6b\x43\x65\x89\x05\xea\x7b\xfc\x50\xec\x8c\x7b\x47\x60\x6f\xe9\x0e\x3d\x0e\x15\x86\xdf\x4e\x8d\xb6\x3a\x37\xf9\x35\x58\x12\x82\x3f\x75\x56\x4c\xd3\x44\x31\xce\xc9\xda\xeb\x09\xb6\x39\x4c\xc1\xb3\x90\x06\x13\xbf\x75\x6d\xd8\xbb\x4c\x5e\xd3\x50\x54\xee\x6a\xba\xb6\xa6\x8a\x23\x9b\xb9\x39\x03\xd9\x48\x55\xe8\x5d\x6a\xb9\xea\xaa\x02\x0e\x3b\x67\x63\x39\xbd\x91\xbe\x78\xf8\x84\xaa\xa3\x77\xe4\xd3\xff\x9e\xbd\x97\xc7\xff\x7e\xf2\xff\x05\x00\x00\xff\xff\x55\xf4\x38\x24\x1a\x03\x00\x00")

func templatesHtmlSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearchHtml,
		"templates/html/search.html",
	)
}

func templatesHtmlSearchHtml() (*asset, error) {
	bytes, err := templatesHtmlSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search.html", size: 794, mode: os.FileMode(420), modTime: time.Unix(1566841707, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/search.html":   templatesHtmlSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"search.html":   &bintree{templatesHtmlSearchHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
