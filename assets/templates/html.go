// Code generated by go-bindata.
// sources:
// templates/html/inc_foot.html
// templates/html/inc_head.html
// templates/html/search.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlInc_footHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xaa\xae\x56\x48\x49\x4d\xcb\xcc\x4b\x55\x50\x4a\xcb\xcf\x2f\x49\x2d\x52\x52\xa8\xad\xe5\xe2\xb4\xd1\x4f\xc9\x2c\xb3\xe3\x52\x50\xb0\xd1\x4f\xca\x4f\xa9\xb4\xe3\xb2\xd1\xcf\x28\xc9\xcd\xb1\xe3\xaa\xae\x56\x48\xcd\x4b\x01\xa9\x01\x04\x00\x00\xff\xff\x1a\x92\x03\x62\x3a\x00\x00\x00")

func templatesHtmlInc_footHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_footHtml,
		"templates/html/inc_foot.html",
	)
}

func templatesHtmlInc_footHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_footHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_foot.html", size: 58, mode: os.FileMode(420), modTime: time.Unix(1567012776, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlInc_headHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x93\xc1\x6e\xdb\x3c\x0c\xc7\xcf\xf6\x53\x10\xfa\x80\xef\x26\xbb\xed\x61\x97\x39\x06\x76\x18\x86\x0e\x3b\x74\x1b\xf6\x00\xb4\x4d\xc7\xea\x64\xc9\x10\xe9\xb4\x81\xe1\x77\x1f\x64\xa5\x41\x0a\x64\xb7\xae\x97\x98\x60\xc8\xff\x8f\xe4\x1f\x5a\x16\xe8\xa8\x37\x8e\x40\x0d\x84\x1d\x05\x05\xeb\x9a\x57\x83\x8c\xb6\xce\x01\x00\xaa\x98\xae\xf3\xac\x12\x23\x96\xea\xaa\x4c\xdf\x3c\xab\xb8\x0d\x66\x12\x90\xe3\x44\x3b\x25\xf4\x2c\xe5\x23\x1e\x30\x65\x15\x70\x68\x77\x6a\x59\xe0\xab\x37\x0e\x8a\x5f\x3f\xbe\x3d\x04\xea\xcd\x33\xa8\x8b\xaa\xd2\xfa\x16\x6d\xef\x03\xee\xa9\x18\x8d\x2b\x1e\x39\xe2\x55\x5d\x95\xa9\xe0\x8d\x30\x4f\x83\x67\xef\x7a\x13\x58\x8a\x39\x98\xf7\xc0\x38\x92\xf7\xc0\xec\xc9\x3f\xb2\xbf\x72\xb8\x2c\x7b\x1b\xd8\x64\xb1\xa5\xc1\xdb\x8e\x42\xd1\x5a\x43\x4e\x8a\x11\x27\xfe\x57\xbb\x5d\xc1\x05\xe2\xd9\xca\x7b\x12\x8d\x33\xd7\xcd\xb3\xc6\xfd\xbe\x84\xb5\xcc\x0a\x02\xd9\x9d\x62\x39\x5a\xe2\x81\x48\x14\x0c\x81\xfa\xbf\x70\x5b\xe6\x6b\xc0\x4d\x67\x5d\x15\x94\xa7\x37\x57\xa6\x47\xb7\xc5\x8d\xef\x8e\xd0\xa1\xa0\x9e\x83\xd5\xd3\x26\xb5\xc9\x5f\x28\xc7\xde\x65\x01\xd3\x43\x71\xcf\x9f\x1e\xee\xbf\xa0\xd0\x13\x1e\x61\x5d\xb7\x46\xc3\x1a\x27\xa3\xf7\x29\xbb\x53\xb7\xb1\x9d\x5c\x07\xeb\x1a\xd7\xea\xcc\x01\x5a\x8b\xcc\x3b\xd5\x7a\x27\x68\x1c\x05\x55\xe7\x79\xb6\xf1\x1d\x9e\xff\x75\x78\x68\x30\x40\xfa\x68\x6b\xf6\x83\x40\xb3\x4f\xc1\xd6\x90\x55\xf8\xba\x56\x37\x01\x5d\xa7\xea\xff\xff\xbb\xfd\x70\xf3\xb1\x2a\x31\x55\xf5\x3e\x8c\x2f\x85\x31\xd6\xc6\x59\xe3\x48\xd5\x79\x96\xa0\xc6\x4d\xb3\xbc\xaa\x88\x93\x05\x6f\x61\x0c\x9a\x47\x7d\xa7\x4e\x3e\x30\x61\x68\x07\x05\x0e\xc7\x93\x2b\x0a\x4c\xf7\x12\x5d\xdc\x7a\xa7\x3e\x3b\xa1\x00\x98\x92\x5b\x03\x88\x87\x24\x00\xbd\x0f\x0a\x0e\x68\x67\x4a\xb7\xfd\x3e\x53\x38\x6e\x77\xc5\x60\x50\x5b\x6c\xa2\xcd\x3f\x13\xed\x3c\x66\x33\x8b\x78\xf7\x32\x67\x23\x0e\x1a\x71\xda\xcf\x12\xb7\xd1\x3c\xb7\x2d\x31\xc3\x78\xd4\x77\xf1\x87\x47\x7d\x73\x9e\x7b\x6e\x46\x23\xaa\x4e\x8a\x55\x99\x94\xa2\x70\x55\xc6\x7d\x63\x74\x32\xa0\x74\x78\xa8\xf3\x2c\x3f\x7b\x96\xff\x09\x00\x00\xff\xff\x10\x14\x4e\x67\xb5\x05\x00\x00")

func templatesHtmlInc_headHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlInc_headHtml,
		"templates/html/inc_head.html",
	)
}

func templatesHtmlInc_headHtml() (*asset, error) {
	bytes, err := templatesHtmlInc_headHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/inc_head.html", size: 1461, mode: os.FileMode(420), modTime: time.Unix(1567116251, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesHtmlSearchHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x5b\x53\xe2\xca\xf6\x7f\xd6\x4f\xd1\x7f\xfe\x53\xfb\x3c\xec\x8d\x04\x88\x53\xe3\x6c\xf4\x94\x90\xa8\xb1\xba\x03\x98\xa0\xc2\x5b\x2e\x6d\xd2\x6d\x2e\x4c\x2e\x84\xc4\xf2\xbb\x9f\x5a\x1d\x12\x60\x74\xce\x9e\xd7\xf3\xd0\x46\xd6\xf5\xb7\x7e\x7d\x49\xaf\xbc\xbd\x21\x97\xbe\xb0\x88\xa2\x4e\x4a\xad\xc4\xf1\x3b\xe8\xfd\xfd\xf4\xed\x0d\x65\x34\x5c\x07\x56\x46\x51\xc7\xa7\x96\x4b\x93\x0e\x3a\x03\x0d\x42\x08\x81\x9a\xbd\xa0\xb3\x79\x4e\x93\x12\x84\x20\xf8\x12\xd0\xc8\xcb\x7c\xf4\xfd\x12\x49\x3b\x19\xd8\x3c\xd0\x34\x0f\xb2\x74\x17\xb4\x31\xba\x44\x01\x8d\x7e\x56\xd2\xc8\x15\x8e\x90\x62\xe4\xb2\x0d\x72\x02\x2b\x4d\x2f\x3b\x8e\x95\xb8\x9d\xab\xd3\x93\xd3\x93\x91\x3f\x3c\x14\x76\x77\xc8\xae\x4e\x4f\xc0\xa7\x86\x93\xec\x62\xbe\xc4\x09\x1a\xfd\xb8\x7a\x7b\xdb\xe3\x1c\xf5\x7e\xec\x4c\xeb\x02\x22\xda\x02\x12\x90\x85\x6a\x94\x86\x56\x10\x5c\xd5\x16\xf4\x47\x6b\xd1\x47\xef\xef\xa6\x4f\x13\x8a\x58\x8a\xe2\x88\xa2\x75\x60\x39\x14\x85\x56\xe6\xf8\x2c\xf2\x50\xe6\xb3\x14\xfd\x80\x4c\x50\x4a\x90\xd2\xd6\xde\x4a\x28\x3a\xa8\xfd\xfd\xbd\x76\x4d\x7f\xe5\x2b\x68\x18\xf5\x6a\x1c\x2d\xde\x1d\x3b\x27\xa3\x9e\x3f\xbc\x3a\x3d\x3d\xf9\x99\xa1\xae\x1d\xbb\x65\x43\x45\xe3\xc5\x5e\x10\x3a\x53\x93\x24\x4e\xda\xfa\x76\x55\x1e\x78\x5b\x01\x4d\x32\x24\xfe\x76\x0b\x2b\x89\x58\xe4\x75\x50\x12\x07\x74\xa7\x82\xa0\x27\xa3\xf5\xd5\x22\xb2\xec\x80\xa2\x2c\x46\x4e\x1c\xae\x03\x9a\xd1\x1a\x33\x4a\x73\xc7\xa1\x69\xfa\x92\x07\x41\x79\x86\xea\x74\x09\x5d\xc7\x49\x46\x5d\xc4\xd2\xef\xa3\xde\x5a\x84\x70\x62\x97\x8a\x09\x69\x10\x8d\x7a\x42\xb4\x83\xd4\x73\xd9\xe6\x27\xfc\x0d\x91\xa7\x87\xd3\x76\x30\x29\xd2\x5e\xf7\xab\x8a\x58\xf4\x12\x7f\x5a\xce\x7e\x72\xa2\xf8\x93\x19\xb1\xb2\xba\xba\xb3\x1a\xfd\x01\xc2\x0f\xe0\x7e\xe6\x95\xb9\x97\x9d\xd0\x5a\x77\xae\x3e\x96\xd4\xea\x77\xcb\xb4\x9b\x01\xa7\x9d\x06\xb8\xf8\xd5\x4d\x68\xba\x8e\xa3\x94\x6d\x68\x8d\x55\x48\x8f\x4c\x50\x6d\xe8\xc7\x9b\x7a\xf9\xd7\xb1\xb3\x04\xfe\x3d\x19\x65\xfe\xd5\x1f\xff\xdf\xff\x2a\xfd\x3d\xea\x65\x7e\x2b\xd2\x94\xa3\x9f\xba\x15\xd2\x23\xc1\x0c\x28\xc8\xca\xf5\xb1\xf4\x81\x7a\x2c\x8e\x84\xe8\xe4\xa4\x11\x4e\xe2\x3c\xca\x92\xf2\xc8\x10\x5b\x19\xcb\x72\xf7\xd8\x1b\xc7\x91\xb7\x97\x8a\x00\x35\x91\x35\xd4\x1d\x8f\x89\x15\x79\x14\x7d\x61\x7f\xa1\x2f\x09\x9c\x1f\x87\xe7\x42\x5b\x5a\x53\x7f\x4d\x5c\xe7\x80\xc4\x2e\x6c\xae\xe4\x4c\x83\xfd\xd1\x41\xae\x95\x59\xdd\xc2\x8f\xd3\x38\x7a\x61\x49\x9a\x75\xc1\xf0\xa3\x85\x1d\xe7\x91\xcb\x22\xaf\x6b\xc7\xdb\x46\x7f\x4b\xe3\x90\x66\x49\x79\x36\xde\x29\xc7\xf1\x16\x3c\xda\x72\xe0\xb9\xc3\x7c\xed\xba\xe8\x0b\x13\xa7\x42\x23\xad\x39\x6f\x7e\x8d\xfe\xaf\xdb\x45\x7e\x96\xad\xd3\xef\xbd\x5e\xe6\xd3\x28\xce\xa3\x75\x12\x73\xea\x64\x67\x4e\x1c\xf6\xea\xd3\xb6\xf7\xef\x1f\x97\x5e\x10\xdb\xf4\x0f\x76\x39\xf8\xd6\xbf\xf8\xf6\xf5\x2b\xea\x76\xdb\x44\x23\x0b\xf9\x09\x7d\xb9\xec\x34\x81\xd2\x35\x0d\xf2\xe8\x95\x26\x67\x07\x25\x9e\xc5\x89\xd7\x63\x6e\xef\xa8\xca\xcc\x4a\x3c\x9a\x5d\x76\x5a\x8f\xce\xd5\x88\x85\x1e\x4a\x13\xe7\xb2\x03\x14\x7c\x67\xa1\xe5\xd1\x5e\xba\xf1\xfe\xdc\x86\xc1\xdf\xb6\x95\xd2\xaf\xf2\x5f\xb3\x3b\x7d\xb0\x2a\xc7\xb2\xfd\xb4\xcd\x9d\x4a\x62\xd6\xdd\x83\xe4\x28\xf1\x06\x0f\xdd\xa1\x5b\x9e\x0f\x49\x79\xbe\x71\x42\x67\x43\xf8\x75\x41\x26\x17\x95\x1b\x3a\x4c\xbb\x7d\xf0\xdd\x5b\x35\xb3\xc3\x9b\x6c\x65\x4a\xcc\x58\xe8\x33\x93\x8d\x27\xf3\xc5\x56\x31\x4a\xcd\x73\xc3\x20\x70\xa5\xfb\x0d\x55\x24\x46\x26\xd7\x85\xa6\x90\x52\x53\xe6\x85\xc6\xc6\xf2\xcc\xd0\x0a\xe7\xce\x63\xda\xdd\xeb\x85\xc6\xc7\x05\x9d\x68\x7f\xce\xee\x1e\xd6\xee\xed\x36\x98\x85\x6e\x6a\x0f\xee\x83\xd9\xe4\x42\xb2\x9e\x1f\xd2\x95\x29\x7f\x73\x6e\x6f\x24\x6b\x32\x7e\x9d\x19\xf7\x3a\xe1\xf3\x7c\xaa\xa8\x29\x31\x03\x9f\x98\xd7\xa9\x18\x93\xa2\xc0\xca\x75\x4a\x98\x5c\x4d\x27\xd2\x00\xf3\xb9\x8c\x95\x57\x61\x37\x35\x64\x99\x18\x3b\xfd\x44\xca\x75\x73\x99\x91\x52\x2e\xf5\x52\xee\xeb\x0c\x46\xa3\x2b\x0a\x6c\xc8\x5b\xc2\x8a\x2d\x99\x88\xd1\xf8\x6c\x75\x26\x97\xd8\x9c\xe7\x44\x59\x91\x29\xd8\x94\x45\x85\xb9\xd7\x5f\x1a\x72\x9f\x88\x71\x10\xbf\x52\x53\xe1\xcf\xe4\x0a\x2b\x6a\x89\x39\x69\xf1\x4d\x27\x72\x49\x8c\xa2\x24\xcf\xcb\x2d\xe6\xda\xc0\x50\xd4\x3e\xe6\x81\x4f\x98\x3c\xd4\x8d\xa2\xc4\xdc\xe9\xb7\x58\x4c\x2d\xd7\xab\x45\x2a\x74\x8f\xcb\x72\xfa\xa4\xe6\xba\x21\xef\xf5\x13\xb9\x8f\xf9\x63\xac\x0f\x3e\x91\x1b\x72\xdf\x65\x52\x4e\xcc\x87\xff\x16\x3b\x13\xba\x27\x2f\xc3\xdc\x29\x1f\xb9\x26\x89\x9a\x4c\xc0\xac\x49\x35\x76\x78\x36\xfc\x7a\x39\xe1\x2a\x70\xd7\x9f\x4e\xe4\x3e\x61\x30\x5a\xee\x72\x62\xce\x33\xcc\xc9\x00\xf3\x45\xae\x1f\xf0\xb1\x93\xf7\x4d\x05\xe2\x2f\x86\x58\x51\xcf\x31\xd7\x7d\xe0\x4d\x9f\x14\x5b\xcc\x17\xd2\x01\xf6\xad\x5e\x82\x4f\x30\xc6\x5c\xab\xc4\x68\xf3\x0b\x7c\x5b\xf0\x7f\x7a\x95\x4a\x32\x91\x0b\xbd\x2c\x4a\xc0\x62\x28\xaa\x84\xb9\x7a\xbe\x34\xd5\x5c\xaf\x96\x29\x31\xe4\x61\x3b\xaf\x06\xe4\x70\xb6\xd8\x54\x73\x52\x05\x31\x61\xb2\xa4\x2f\x54\x90\x01\x96\x5c\xaf\x9c\x5d\x7c\x35\x25\xfc\x3a\x27\x8a\x93\x12\xee\xe5\xfa\xe3\x5a\x9f\x1a\x72\xa9\x4f\x0a\x19\x73\x15\xe6\x72\x8b\xf9\x7c\x88\x15\x3f\xc5\x20\x37\x8a\x0a\xe6\x1f\xf3\x45\x3b\xbf\x98\xcf\xa1\x46\xc9\x56\x48\x0e\x31\x48\xf5\x9a\x02\x5f\x75\x9d\x73\x09\x30\xe8\x5c\x4d\x05\x77\xa1\x9a\xeb\x8a\x07\xa3\xf1\xcf\x30\xbf\x1e\x60\x4e\x86\xf6\x44\x1e\xe8\x0c\xd6\xd8\x75\xff\x63\x0e\x92\x93\x6a\x99\xeb\xa6\x07\xe3\x40\xae\x9e\xd7\xcf\x45\x25\xc6\x9e\xd3\x52\x70\xaa\xf8\x90\xb7\x14\x18\xa0\xd6\xb2\xc8\xa7\xca\xfd\x78\x6a\x14\xe7\x3b\xdb\x2d\xec\x19\xc2\xe7\xb0\x4e\xb7\xa4\xbf\xce\x88\xb9\x80\xfd\x95\x13\x45\xec\x99\x21\x29\xa5\xed\xd2\x90\x25\xbd\x84\x71\xb0\xe6\x61\x2e\xc2\x22\x03\xde\xa7\x82\x6f\x55\xc2\x60\xc7\xa4\x12\x73\xb5\x0f\x3c\x4f\x15\x15\xd6\x9b\xac\x2f\xd4\x5c\x87\xf5\x67\x6a\xfb\x7d\x6b\xbe\xe6\x7a\x59\x6c\xc9\xe0\x83\x2e\xc3\x5c\x3b\xc7\x86\x5c\x91\x45\xb1\xd5\x81\x77\xd8\x9f\x4f\x45\x56\xcf\xc9\x75\x1d\x13\xea\xab\xe6\x39\xe1\x02\x67\x1d\xe7\x70\x4f\x18\xf2\x56\x37\xa4\x5c\x57\x21\xbe\x18\x07\xb9\xb5\x54\x67\xf2\x39\x01\xfc\x0c\xd6\xf1\xa3\x7f\xcc\xc9\x32\x27\x7c\x21\xd6\x3d\x79\x2d\xb6\xba\x58\xfb\xc5\x00\x73\x55\xfe\x38\x37\x30\x7f\xcb\xd2\x86\x7a\xa1\x86\xf0\x63\xad\x98\x2f\x61\x5e\x65\x5b\xd1\xea\xfd\x64\xc0\x99\x25\xf6\x41\x85\x41\xf6\x71\x5d\xc0\xba\x82\xf3\xa2\xb4\x94\x79\xae\x9b\x37\xc7\xf8\x44\x3d\x9e\x38\x5b\xa6\x37\x6b\x88\x57\x62\x13\xe6\xd1\xd7\x08\x07\xdd\x03\x01\x7e\xa7\x06\x60\x5e\x54\x9f\x9e\x59\x1c\xce\x00\x55\x32\x15\x75\x80\xf9\xab\x84\x15\x67\x77\xc6\x2e\x72\xdd\x74\x80\x9f\x6a\xfa\x04\x18\xbd\x12\xce\x8e\xa9\xe2\x8f\xa7\x86\xd8\x7f\xe7\x98\x5f\x0f\xf7\x5c\x69\x7d\x81\x55\xf1\xf2\xa9\x79\x63\xd9\x86\x24\x63\xae\xc9\x58\x51\xfb\x73\x13\xf6\x0f\x91\xea\x7d\x44\xa4\xbd\xcf\x62\x97\x0b\x78\x5a\xf9\x04\xf6\x29\xd7\xd2\xf6\xd9\xec\xcd\x52\x1a\x62\xbe\x94\xec\x89\x7c\x8e\x79\x30\x86\x75\x39\x35\xe7\x69\xfb\xdc\x9f\xb1\x70\xa6\x0f\x31\x27\xf5\x5a\x15\xe3\xf0\x3c\x52\xc5\xf9\xf2\xe1\xdd\xc1\x49\x3e\x15\x7b\x7f\x9c\x62\xfe\x9a\x4f\x17\xea\x16\xb8\x24\xb0\x2e\xeb\x67\x7b\x9e\xe8\xa5\x78\x07\x94\xa4\x94\xe5\xe9\x4d\xcc\x70\x25\x7f\x73\x6f\x1f\x65\x77\x52\xbf\xdb\x34\x36\x3e\x9f\x19\x9a\xa4\x97\x9a\xb7\x0a\x83\xd4\x56\x24\xa6\x55\xd7\x05\x51\xe0\xfd\x09\xb2\x8b\xdc\x9d\xf4\x2b\xeb\x79\x1d\xcc\x0c\xad\x2f\xde\x85\xb7\xab\x8d\x1d\xcd\x33\x77\xf0\xb8\x5e\x0d\x7c\x69\x66\xdc\x33\x7b\xb0\x7d\xd5\xd8\x38\xb4\x07\xe7\x12\x7e\x5a\xf9\xf6\x53\x90\x52\x53\x62\xf7\x92\x1f\xd8\x77\xab\xc0\xbd\x0d\xf8\xd2\x18\x4f\x57\xcf\x8f\xc1\x7d\x59\x78\xc6\xed\x63\xea\x86\x8f\x92\xf5\xa4\xfb\x78\x32\x1e\x3b\x61\xe0\xdb\x93\xfe\xa3\x1d\x06\xdc\x1e\x3c\x04\x7b\x59\xe1\x2d\x06\x37\xb9\x53\xf6\xab\xd5\xf3\xfd\x7a\xc5\xb4\x3f\xe7\xc3\xfb\x60\xf9\xfc\x10\xac\x26\x63\x46\x8d\xf1\xdc\xba\x0d\x52\xeb\x79\x5c\x68\x37\xe3\xc0\xbd\x5b\x27\x4b\xb3\xd8\x88\x1a\x95\x4f\x6b\xed\x13\xf6\xbf\x53\xeb\x2a\xba\xdf\xd8\xc6\x58\xb2\x6e\x17\x9e\x19\x5e\xf4\x6d\x36\x9e\x3b\xe1\xc5\x8f\xd5\x93\x2e\xc1\xbd\x63\xf5\xec\x4b\x33\x5e\x6c\x9c\xe1\x2a\x9a\x79\x97\x97\x1d\xe4\x53\xe6\xf9\xd9\x65\x67\x20\x77\x50\xc1\xdc\xcc\xaf\xff\xcd\x58\x06\x2d\xc6\x23\xa3\x45\xdd\xcf\xd5\xfd\x21\x8b\x50\xe6\x53\xf4\xe4\xc7\xff\x4a\xd1\x34\x42\x37\x70\x61\x43\x46\x7b\x29\x43\xbd\xab\x51\xcf\xba\xaa\xef\x7b\xe2\x9e\xb9\xbf\x3f\xbb\xbf\xb8\xe4\x76\x99\xdb\x76\x0c\xc7\x37\xdd\x16\xc6\x2a\x8e\x43\xe8\xd4\x0e\x90\xc4\x35\x12\xd1\x98\x1c\x04\x1b\xf5\x32\xf7\x9f\xf2\x45\x56\x48\x1b\x27\xe8\x1b\x7e\xd3\x6d\xdd\x74\x14\x8d\x6f\xdb\x62\xfc\x66\x80\x44\x34\x1f\xc2\x7b\xd7\x23\x70\xe8\x11\x3c\x68\x12\xae\x23\x87\xa6\x59\x9c\xa4\xd0\x34\x74\x76\x96\xe8\xfd\x5d\xf8\x7b\x0d\xcc\x83\x7e\x3a\x73\xdb\x0e\xe6\x97\x09\x9d\xba\xb1\xf9\x39\xa3\xf3\x31\x61\x63\xb9\xcb\xe8\x7c\x9e\xf0\x1f\xd2\x05\xbb\x9e\xa9\xe1\xa7\x6d\x40\x9a\x66\xea\x77\xe3\x34\x6d\xd6\xc7\x40\x8d\xe6\x88\x82\x4f\x7a\xb0\xe6\xf3\x02\xac\x3f\xe8\x2d\x3f\x69\xca\x0f\xac\xea\x86\xf6\xe8\xab\x44\x6d\x77\x7a\xe0\x74\xec\xd3\x7c\x38\xda\x7f\x57\x7a\x89\xe3\xac\xfd\xae\xb4\x37\xfc\x4f\x00\x00\x00\xff\xff\xb1\x7a\x16\x73\x92\x12\x00\x00")

func templatesHtmlSearchHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlSearchHtml,
		"templates/html/search.html",
	)
}

func templatesHtmlSearchHtml() (*asset, error) {
	bytes, err := templatesHtmlSearchHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/search.html", size: 4754, mode: os.FileMode(420), modTime: time.Unix(1567721886, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/inc_foot.html": templatesHtmlInc_footHtml,
	"templates/html/inc_head.html": templatesHtmlInc_headHtml,
	"templates/html/search.html": templatesHtmlSearchHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"inc_foot.html": &bintree{templatesHtmlInc_footHtml, map[string]*bintree{}},
			"inc_head.html": &bintree{templatesHtmlInc_headHtml, map[string]*bintree{}},
			"search.html": &bintree{templatesHtmlSearchHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

