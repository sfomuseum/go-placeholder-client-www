// Code generated by go-bindata.
// sources:
// static/javascript/placeholder.client.init.js
// static/javascript/placeholder.client.maps.js
// static/javascript/placeholder.client.maps.js~
// static/javascript/placeholder.client.results.js
// static/css/placeholder.client.css
// DO NOT EDIT!

package http

import (
	"github.com/whosonfirst/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticJavascriptPlaceholderClientInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\x41\x4e\xeb\x30\x10\x86\xd7\x2f\xa7\x98\xe7\x95\x23\xb5\xbe\x40\xd5\x05\x45\x5d\x20\x01\x0b\x2e\x50\x4d\xe3\x69\xb1\xea\xd8\x96\x3d\x69\x30\x55\xef\x8e\x5c\x43\x84\x4a\x05\x9b\x68\x22\x8f\xbf\xef\xff\xe5\xd1\x38\xed\x47\x85\x5a\xaf\x8f\xe4\xf8\xd1\x24\x26\x47\x51\x0a\xeb\x51\x8b\x19\xec\x06\xd7\xb1\xf1\x0e\xca\xbf\xa4\xb2\xd3\x9e\x9a\x06\x00\xe0\x88\x11\x30\x98\xcd\x81\x32\x2c\x41\xfb\x6e\xe8\xc9\xb1\xda\x7a\x9d\xd5\x9e\xf8\x8e\x39\x9a\xed\xc0\x24\x85\x46\xc6\xb9\xa3\x37\x7e\x27\x37\xc7\x60\xe6\x07\xca\xa2\x5d\x54\x8c\xd9\x81\xfc\xff\x05\x6a\x4f\xcd\xbf\x48\x3c\x44\xb7\xb8\x1c\x9e\x2f\xdf\x49\xd7\x63\xd8\x90\xfd\x6e\xdb\x13\xaf\x2d\x95\x71\x95\x1f\xb4\x14\x3d\x86\x2b\x72\xbd\xf3\x37\x18\x96\x10\x2c\x76\xf4\xea\xad\xa6\xa8\x3a\x6b\x0a\xbf\xc7\x90\x8a\xe4\x09\x83\xac\xa4\xd9\x94\xf5\x5a\xf3\xd3\x31\xf1\xa3\x1f\xd3\xed\xd8\x69\x95\xef\x2d\xa6\xf4\x8c\x3d\x49\x11\x29\x0d\x96\x4b\x83\x29\x5e\xc5\xdf\x88\x56\x77\x93\xd2\x11\xc7\x97\x3a\x97\x88\xed\x2f\x55\x6b\x03\x95\x38\x5b\x52\xda\xa4\x60\xb1\xbc\x9d\xd8\x5a\xdf\x1d\xc4\xa7\xf4\x3c\x83\x1d\xda\x44\xed\xa2\xf9\x08\x00\x00\xff\xff\x7a\xa8\x6b\x57\x1e\x02\x00\x00")

func staticJavascriptPlaceholderClientInitJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptPlaceholderClientInitJs,
		"static/javascript/placeholder.client.init.js",
	)
}

func staticJavascriptPlaceholderClientInitJs() (*asset, error) {
	bytes, err := staticJavascriptPlaceholderClientInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/placeholder.client.init.js", size: 542, mode: os.FileMode(420), modTime: time.Unix(1567016690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptPlaceholderClientMapsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\x4d\x8f\xb3\x38\x0c\x3e\xc3\xaf\xf0\xf6\xb0\xb4\x12\x4b\xd4\x57\x9a\x3d\xc0\x74\xa4\x3d\xef\xc7\x1c\x76\x6f\xa3\x11\x4a\xa9\x4b\xa3\x81\x24\x4a\xd2\x4e\x5b\x86\xff\xbe\x32\x84\x36\xbc\xd3\x0b\x1f\xf6\x63\xfb\xc9\x63\x3b\x27\x6e\x40\x37\xbc\xc2\x83\x6a\x76\x68\x60\x33\xfb\xfb\xfa\x82\xae\x2f\xe2\xc0\x94\x55\x8d\x40\xe9\xe6\xb8\xc9\xe8\xe1\x0f\xf0\x59\xcb\xb5\x85\x0d\x2c\xf7\x47\x59\x39\xa1\xe4\x72\xd5\xc5\x31\x00\x00\x11\xe0\xce\x19\xb1\x3d\x92\x1d\x36\x90\x3c\x73\x38\x18\xdc\x6f\x16\x07\xe7\xb4\xcd\x19\xab\x85\x3b\x1c\xb7\x59\xa5\x5a\xe6\xb8\xac\x0d\x6f\xed\x02\x1c\x37\x35\xba\xcd\xa2\xdc\x36\x5c\x7e\x2c\x5e\xfe\x1b\x3d\xcf\x8c\xbf\xc0\x17\xcc\x72\xe4\x8c\x7d\x7e\x7e\x66\x4a\xa3\xb4\xce\x20\xba\x96\xeb\x4c\x99\x9a\x55\x4a\x5f\x8c\xa8\x0f\xee\x7b\xba\x5f\xc9\x57\xc0\xab\x46\xf9\xef\x10\xf3\x37\xd7\x50\x29\x39\x32\x55\xc6\x3e\x2a\x64\x7d\x25\x89\x67\x77\x45\x39\xd4\xf8\x9e\xfa\x9f\xd1\x4b\x09\x92\x62\x10\xe1\xa6\x84\x97\x69\x50\x71\xb2\x59\x6c\xf6\x64\x8b\xe3\x28\xa9\x07\x1e\x49\x0e\x37\x1d\x5b\xae\x4b\x6c\x52\xe0\x5a\x94\x1f\x78\x21\x59\xa3\x20\x5b\x29\x76\xb0\x81\x11\x94\xd5\xe8\xfe\xf0\x52\xe3\x72\x21\x76\x8b\x55\xe1\xd1\x62\x0f\xcb\x5f\x3c\x7e\xd5\xc5\x51\x64\xd0\x1d\x8d\x2c\x46\x6f\x3f\xbe\xee\x50\xa2\xf9\x36\xa2\xdf\x03\x38\x84\xf6\x5b\xec\x9d\xcf\xbc\xcf\x74\xae\x90\xd2\x30\x15\xc5\x1d\xed\x5b\x5d\x2a\xed\x6c\x00\xf7\x7d\x7e\xd5\x14\x60\x97\xd3\xb9\x8b\x90\x23\x85\xfb\x1e\x4c\xe1\xc4\x92\x6b\xf1\x27\x5e\xf2\x49\xab\x94\x4c\xf7\xe2\x79\xc8\x8f\x7c\x6e\x56\x29\x9f\x11\x4a\xfd\xe9\xbe\x95\x6d\xb9\x86\x0d\xfc\x95\xf9\x26\xd3\xe0\x2f\x93\x96\xeb\x24\x9d\x31\x9a\xf8\x86\x8a\x8d\x8d\x9a\x65\xbc\xeb\x5a\xc4\x51\x9f\xfa\x11\x98\x4b\x10\x4e\xc3\xa3\x29\xf8\x49\x47\x12\xc2\x56\x28\x31\x1f\x3e\x87\x96\xb6\x5a\x19\x97\xc3\x5b\x1c\x45\x51\x32\xed\x18\x33\xb8\x17\x4d\xf3\x9b\x75\x97\x06\xb3\xab\xd0\x49\x1a\x31\x06\x56\xb5\xe8\x0e\x42\xd6\x0f\xbf\x34\x05\x9d\xd1\xfa\xcc\xef\xa9\xff\xb0\xea\x68\x2a\xb4\x63\xcd\xa8\xe5\xfa\x8a\xd2\xff\x90\xfb\x68\x9a\x1c\x92\x69\x85\x3a\xdb\x67\x4e\x34\x38\xdb\x23\x32\x5c\x51\xb2\x13\x56\x4e\x19\x76\x5a\xb3\xa7\xf5\x0f\xc6\x9b\x86\x75\xd7\x9e\x75\xe7\x9e\x75\x97\x3e\x6b\x4f\x2e\x49\x83\xac\xa5\x3d\x6e\x77\xaa\xe5\x82\x1a\xf8\x96\xf0\x24\x85\x64\x4b\x8f\x8a\x1e\xbb\xe4\x7d\x06\xd6\x9c\xee\x96\x1c\x3a\xaf\xe3\x6d\x54\xfa\x1b\x8c\x68\x94\x56\x5c\x31\x87\xa7\xf5\x8f\x9b\xb9\xe5\xe7\xf2\xaa\x54\x9b\xc3\xfa\x77\xb2\xf5\xfe\xdc\xf4\xee\x6f\xb3\x32\x6b\x6a\xd8\x97\xb0\xbb\xc1\x3e\x84\xad\xa5\x3d\x0b\xa2\x83\x59\xa5\xe0\xf1\x1e\x99\xae\x0d\x8f\xa1\x95\xf1\x17\x4c\xbf\xa2\xdd\xfa\x3f\x00\x00\xff\xff\x25\x48\x44\x40\xee\x05\x00\x00")

func staticJavascriptPlaceholderClientMapsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptPlaceholderClientMapsJs,
		"static/javascript/placeholder.client.maps.js",
	)
}

func staticJavascriptPlaceholderClientMapsJs() (*asset, error) {
	bytes, err := staticJavascriptPlaceholderClientMapsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/placeholder.client.maps.js", size: 1518, mode: os.FileMode(420), modTime: time.Unix(1567016735, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptPlaceholderClientMapsJs2 = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\x4d\x8f\xb3\x38\x0c\x3e\xc3\xaf\xf0\xf6\xb0\xb4\x12\x4b\xd4\x57\x9a\x3d\xc0\x74\xa4\x3d\xef\xc7\x1c\x76\x6f\xa3\x11\x4a\xa9\x4b\xa3\x81\x24\x4a\xd2\x4e\x5b\x86\xff\xbe\x32\x84\x36\xbc\xd3\x0b\x1f\xf6\x63\xfb\xc9\x63\x3b\x27\x6e\x40\x37\xbc\xc2\x83\x6a\x76\x68\x60\x33\xfb\xfb\xfa\x82\xae\x2f\xe2\xc0\x94\x55\x8d\x40\xe9\xe6\xb8\xc9\xe8\xe1\x0f\xf0\x59\xcb\xb5\x85\x0d\x2c\xf7\x47\x59\x39\xa1\xe4\x72\xd5\xc5\x31\x00\x00\x11\xe0\xce\x19\xb1\x3d\x92\x1d\x36\x90\x3c\x73\x38\x18\xdc\x6f\x16\x07\xe7\xb4\xcd\x19\xab\x85\x3b\x1c\xb7\x59\xa5\x5a\xe6\xb8\xac\x0d\x6f\xed\x02\x1c\x37\x35\xba\xcd\xa2\xdc\x36\x5c\x7e\x2c\x5e\xfe\x1b\x3d\xcf\x8c\xbf\xc0\x17\xcc\x72\xe4\x8c\x7d\x7e\x7e\x66\x4a\xa3\xb4\xce\x20\xba\x96\xeb\x4c\x99\x9a\x55\x4a\x5f\x8c\xa8\x0f\xee\x7b\xba\x5f\xc9\x57\xc0\xab\x46\xf9\xef\x10\xf3\x37\xd7\x50\x29\x39\x32\x55\xc6\x3e\x2a\x64\x7d\x25\x89\x67\x77\x45\x39\xd4\xf8\x9e\xfa\x9f\xd1\x4b\x09\x92\x62\x10\xe1\xa6\x84\x97\x69\x50\x71\xb2\x59\x6c\xf6\x64\x8b\xe3\x28\xa9\x07\x1e\x49\x0e\x37\x1d\x5b\xae\x4b\x6c\x52\xe0\x5a\x94\x1f\x78\x21\x59\xa3\x20\x5b\x29\x76\xb0\x81\x11\x94\xd5\xe8\xfe\xf0\x52\xe3\x72\x21\x76\x8b\x55\xe1\xd1\x62\x0f\xcb\x5f\x3c\x7e\xd5\xc5\x51\x64\xd0\x1d\x8d\x2c\x46\x6f\x3f\xbe\xee\x50\xa2\xf9\x36\xa2\xdf\x03\x38\x84\xf6\x5b\xec\x9d\xcf\xbc\xcf\x74\xae\x90\xd2\x30\x15\xc5\x1d\xed\x5b\x5d\x2a\xed\x6c\x00\xf7\x7d\x7e\xd5\x14\x60\x97\xd3\xb9\x8b\x90\x23\x85\xfb\x1e\x4c\xe1\xc4\x92\x6b\xf1\x27\x5e\xf2\x49\xab\x94\x4c\xf7\xe2\x79\xc8\x8f\x7c\x6e\x56\x29\x9f\x11\x4a\xfd\xe9\xbe\x95\x6d\xb9\x86\x0d\xfc\x95\xf9\x26\xd3\xe0\x2f\x93\x96\xeb\x24\x9d\x31\x9a\xf8\x86\x8a\x8d\x8d\x9a\x65\xbc\xeb\x5a\xc4\x51\x9f\xfa\x11\x98\x4b\x10\x4e\xc3\xa3\x29\xf8\x49\x47\x12\xc2\x56\x28\x31\x1f\x3e\x87\x96\xb6\x5a\x19\x97\xc3\x5b\x1c\x45\x51\x32\xed\x18\x33\xb8\x17\x4d\xf3\x9b\x75\x97\x06\xb3\xab\xd0\x49\x1a\x31\x06\x56\xb5\xe8\x0e\x42\xd6\x0f\xbf\x34\x05\x9d\xd1\xfa\xcc\xef\xa9\xff\xb0\xea\x68\x2a\xb4\x63\xcd\xa8\xe5\xfa\x8a\xd2\xff\x90\xfb\x68\x9a\x1c\x92\x69\x85\x3a\xdb\x67\x4e\x34\x38\xdb\x23\x32\x5c\x51\xb2\x13\x56\x4e\x19\x76\x5a\xb3\xa7\xf5\x0f\xc6\x9b\x86\x75\xd7\x9e\x75\xe7\x9e\x75\x97\x3e\x6b\x4f\x2e\x49\x83\xac\xa5\x3d\x6e\x77\xaa\xe5\x82\x1a\xf8\x96\xf0\x24\x85\x64\x4b\x8f\x8a\x1e\xbb\xe4\x7d\x06\xd6\x9c\xee\x96\x1c\x3a\xaf\xe3\x6d\x54\xfa\x1b\x8c\x68\x94\x56\x5c\x31\x87\xa7\xf5\x8f\x9b\xb9\xe5\xe7\xf2\xaa\x54\x9b\xc3\xfa\x77\xb2\xf5\xfe\xdc\xf4\xee\x6f\xb3\x32\x6b\x6a\xd8\x97\xb0\xbb\xc1\x3e\x84\xad\xa5\x3d\x0b\xa2\x83\x59\xa5\xe0\xf1\x1e\x99\xae\x0d\x8f\xa1\x95\xf1\x17\x4c\xbf\xa2\xdd\xfa\x3f\x00\x00\xff\xff\x25\x48\x44\x40\xee\x05\x00\x00")

func staticJavascriptPlaceholderClientMapsJs2Bytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptPlaceholderClientMapsJs2,
		"static/javascript/placeholder.client.maps.js~",
	)
}

func staticJavascriptPlaceholderClientMapsJs2() (*asset, error) {
	bytes, err := staticJavascriptPlaceholderClientMapsJs2Bytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/placeholder.client.maps.js~", size: 1518, mode: os.FileMode(420), modTime: time.Unix(1567016593, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptPlaceholderClientResultsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x7c\x93\xcd\x8e\x9b\x30\x14\x85\xd7\xf0\x14\x77\xd8\x8c\xd1\x30\x56\xfa\xb3\x1a\x97\xc5\x8c\xba\xec\x4c\xab\x56\x5d\x45\x51\xe5\x10\x93\x58\x22\x36\xb2\x4d\x03\x65\x78\xf7\xca\x3f\xd0\x38\x8d\x66\x93\xc8\xf7\x7c\xf7\xdc\x63\x63\xff\xa6\x0a\xda\x86\x56\xec\x20\x9b\x1d\x53\x50\x46\xab\xd7\x57\x18\x27\x92\x9e\x95\x70\xd5\x70\x26\x4c\xcc\xcd\xc5\x80\x5f\xe1\xb1\x62\xba\x6b\x8c\x86\x12\x50\xdd\x89\xca\x70\x29\x50\x3e\xa6\x29\x00\x80\xcd\xa0\x59\x53\x43\x09\x63\x9a\x26\xb7\x3b\x45\x4f\xdf\x3d\x7f\xfb\x00\x0b\x7e\xa4\x6d\x01\x4a\x9e\xb4\xed\x4b\xe6\xc6\x4a\x76\x2e\x8e\x15\x70\xc3\xc4\xde\x1c\x48\x90\x79\x0d\xe8\xc6\x03\xf9\x98\x26\x89\x62\xa6\x53\x02\x6a\xda\x68\x46\x3c\x32\xf9\xbf\x7f\x76\x47\x2e\x7a\x28\x61\x85\x57\x24\x2a\x0e\xff\x17\x69\x7f\x85\xa4\x7d\x4c\xfa\xdf\x5a\x2a\x40\x56\xe7\xe5\x8a\x00\x87\x4f\x3e\x15\x01\x7e\x77\xe7\xa2\xa5\x49\x62\x65\x25\x4f\x61\x2b\x6b\xbe\x21\xa1\xb8\xdd\xca\xde\x57\xf1\x9e\x99\x47\x63\x14\xdf\x76\x86\xa1\x6c\x47\x0d\xbd\xdf\xca\x4e\xec\xb8\xd8\xdf\x6f\x65\x9f\xe5\xc4\x7b\xf9\x9d\xdb\x46\xe7\x6e\x23\x54\x52\x18\x2e\x3a\xbb\xf1\x64\xf2\x54\x30\xb6\x7f\x58\xb7\x0d\x37\x28\x2b\x22\x0b\xa7\xf8\x33\x85\x9b\x12\x3e\xbe\x65\x16\xe2\xff\x0a\x07\x68\x5b\xd7\xab\x65\x0f\x41\x19\x66\xe5\x5d\xac\xf8\xa3\x74\xca\xfb\x4b\x65\xe9\xf9\xb0\x09\xd1\xc2\x88\x67\x6a\x0e\xf8\xc8\x05\xb2\xeb\x62\x19\xee\x36\x10\x66\x9d\x23\xc3\x82\x0c\x1e\xf1\x43\x3d\x42\x7b\x64\xd7\xc5\x12\x67\x46\x86\x0b\x64\x58\x10\xe7\x72\xf5\x0e\x69\xfb\x11\xd7\xe0\x67\xba\xb0\x9b\xb3\x2b\x22\x98\x57\x9d\x97\x0b\xb1\x21\x97\x0e\xee\xa3\x6a\xc7\xe9\x53\x61\x5b\x66\xa6\x92\x42\xcb\x86\xe1\x46\xee\x51\xf6\xf4\xf5\xe7\xcb\xe7\x1f\x59\x11\xf8\x3c\xf2\x89\xc8\xe7\xc7\x6f\x99\x9d\xd6\xc6\xcc\x91\xb6\xb8\xe6\xe6\xc9\xb5\xa3\xd8\xe5\x0b\x7e\x61\xbd\xf9\xc3\x04\x3e\x50\x7d\x40\xe3\x91\xb6\x0f\xb6\x61\xca\xe7\xf7\x15\xde\x93\x51\xee\x22\x4c\xee\x2d\xdb\xe7\x7f\xa6\xd9\x67\x4d\x5c\x21\x9d\x72\x94\x93\xf4\x6f\x00\x00\x00\xff\xff\x21\xac\x31\x59\x70\x04\x00\x00")

func staticJavascriptPlaceholderClientResultsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptPlaceholderClientResultsJs,
		"static/javascript/placeholder.client.results.js",
	)
}

func staticJavascriptPlaceholderClientResultsJs() (*asset, error) {
	bytes, err := staticJavascriptPlaceholderClientResultsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/placeholder.client.results.js", size: 1136, mode: os.FileMode(420), modTime: time.Unix(1567016729, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssPlaceholderClientCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x52\xce\x4d\x2c\x50\xa8\xe6\xe2\x2c\xcf\x4c\x29\xc9\xb0\x52\x30\x34\x30\x50\xb5\xe6\xe2\xcc\x48\xcd\x4c\xcf\x28\xb1\x52\x30\x31\x28\xcb\xb0\xe6\xe2\x4c\xc9\x2c\x2e\xc8\x49\xac\xb4\xca\xcb\xcf\x4b\xb5\xe6\xaa\xe5\x02\x04\x00\x00\xff\xff\xa4\x77\x8f\xf4\x35\x00\x00\x00")

func staticCssPlaceholderClientCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssPlaceholderClientCss,
		"static/css/placeholder.client.css",
	)
}

func staticCssPlaceholderClientCss() (*asset, error) {
	bytes, err := staticCssPlaceholderClientCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/placeholder.client.css", size: 53, mode: os.FileMode(420), modTime: time.Unix(1567015978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/javascript/placeholder.client.init.js": staticJavascriptPlaceholderClientInitJs,
	"static/javascript/placeholder.client.maps.js": staticJavascriptPlaceholderClientMapsJs,
	"static/javascript/placeholder.client.maps.js~": staticJavascriptPlaceholderClientMapsJs2,
	"static/javascript/placeholder.client.results.js": staticJavascriptPlaceholderClientResultsJs,
	"static/css/placeholder.client.css": staticCssPlaceholderClientCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"placeholder.client.css": &bintree{staticCssPlaceholderClientCss, map[string]*bintree{}},
		}},
		"javascript": &bintree{nil, map[string]*bintree{
			"placeholder.client.init.js": &bintree{staticJavascriptPlaceholderClientInitJs, map[string]*bintree{}},
			"placeholder.client.maps.js": &bintree{staticJavascriptPlaceholderClientMapsJs, map[string]*bintree{}},
			"placeholder.client.maps.js~": &bintree{staticJavascriptPlaceholderClientMapsJs2, map[string]*bintree{}},
			"placeholder.client.results.js": &bintree{staticJavascriptPlaceholderClientResultsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
