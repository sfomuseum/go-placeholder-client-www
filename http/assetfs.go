// Code generated by go-bindata.
// sources:
// static/javascript/placeholder.client.init.js
// static/javascript/placeholder.client.maps.js
// static/javascript/placeholder.client.results.js
// static/css/placeholder.client.css
// DO NOT EDIT!

package http

import (
	"github.com/whosonfirst/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _staticJavascriptPlaceholderClientInitJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x4f\x6b\xdc\x30\x10\xc5\xcf\xdd\x4f\x31\xd5\x49\x06\xaf\x60\x37\xfd\x93\x62\x7c\x68\x4a\x0a\x85\xb6\x87\x1e\x7a\x29\x25\xcc\x5a\xb3\xa9\x58\x59\x12\xd2\x38\xae\x13\xf2\xdd\x8b\xac\x76\x31\x9b\x2c\xf4\x62\x4b\x9a\x99\xdf\x7b\x6f\x46\xe3\xb4\x1f\x15\x6a\x7d\x7d\x47\x8e\x3f\x9b\xc4\xe4\x28\x4a\x61\x3d\x6a\x51\xc3\x7e\x70\x1d\x1b\xef\x20\xdf\x25\xe5\x9e\xea\x61\xb5\x02\x00\xb8\xc3\x08\x18\xcc\xcd\x81\x26\x68\x41\xfb\x6e\xe8\xc9\xb1\xda\x79\x3d\xa9\x5b\xe2\xf7\xcc\xd1\xec\x06\x26\x29\x34\x32\xae\x1d\xfd\xe6\x7b\x72\x6b\x0c\x66\x7d\xa0\x49\x54\x4d\xc1\x98\x3d\xc8\x97\xff\x40\xd5\xc3\xea\x45\x24\x1e\xa2\x6b\xe6\xe2\xe3\xfc\x3d\xca\xf5\x18\x6e\xc8\x2e\xd5\x6e\x89\xaf\x2d\xe5\xe3\xd5\xf4\x49\x4b\xd1\x63\x38\x21\x97\x99\xa7\xe0\xf9\x57\x8a\x2a\xf1\x64\x49\x69\x93\x82\xc5\x1c\x46\xec\xac\xef\x0e\xa2\x79\xa2\x0e\x2d\x04\x8b\x1d\xfd\xf2\x56\x53\x54\x9d\x35\xd9\x44\x8f\x21\x65\x27\x5f\x30\xc8\x42\xac\x8f\x81\x4e\xbd\x9c\x31\x92\xf9\xf7\xde\xf7\xd0\xc2\xe6\x55\x73\x7c\xb2\xc8\xd0\xc2\xc5\x5b\xf5\x66\x73\xf9\x7a\xf1\xec\x1d\xb4\xb0\xde\x6c\xb7\xea\xe2\x72\xfb\xae\x39\x86\x51\x89\xf8\xbb\xa1\x51\xfe\xc8\xa3\xf5\xdc\xf8\xb3\x9e\xc9\xd5\x49\x9a\xe8\xc7\xf4\xfc\x26\xd3\xd5\xf4\xc1\x62\x4a\x5f\xb1\x27\x29\x22\xa5\xc1\xb2\x58\x8e\x97\x30\xcf\x2c\xa2\xf4\x26\xa5\x23\x8e\xdf\xca\xf9\xef\x4e\xea\x59\xaf\x3a\x93\xfe\xff\x50\x1f\x09\x79\x88\x94\x16\xbc\xe2\xe9\xb1\x86\x3d\xda\x44\x55\xb3\xfa\x13\x00\x00\xff\xff\x0e\xb8\x36\xd7\xd0\x02\x00\x00")

func staticJavascriptPlaceholderClientInitJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptPlaceholderClientInitJs,
		"static/javascript/placeholder.client.init.js",
	)
}

func staticJavascriptPlaceholderClientInitJs() (*asset, error) {
	bytes, err := staticJavascriptPlaceholderClientInitJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/placeholder.client.init.js", size: 720, mode: os.FileMode(420), modTime: time.Unix(1567019089, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptPlaceholderClientMapsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x54\x4d\x8f\xa3\x38\x10\x3d\xc3\xaf\xa8\xcd\x61\x49\x24\x16\x2b\x2d\xf5\x1e\xa0\xd3\xd2\x9e\x77\x66\xfa\x30\x73\x6b\xb5\x90\x43\x2a\xc4\x6a\xfc\x21\xdb\x49\x27\xa1\xf9\xef\x23\x83\x21\x66\x3a\x17\x30\x55\xaf\xaa\x9e\x5f\x55\x71\xa2\x1a\x54\x43\x2b\x3c\xc8\x66\x87\x1a\x36\xb3\xaf\xcf\x4f\x68\xbb\x22\x0e\x4c\x59\xd5\x30\x14\x76\x8e\x1b\x8d\x1e\x7e\x07\x9f\x71\xaa\x0c\x6c\x60\xb9\x3f\x8a\xca\x32\x29\x96\xab\x36\x8e\x01\x00\x1c\x01\x6a\xad\x66\xdb\xa3\xb3\xc3\x06\x92\x27\x0a\x07\x8d\xfb\xcd\xe2\x60\xad\x32\x39\x21\x35\xb3\x87\xe3\x36\xab\x24\x27\x96\x8a\x5a\x53\x6e\x16\x60\xa9\xae\xd1\x6e\x16\xe5\xb6\xa1\xe2\x7d\xf1\xfc\x6b\xf0\x3c\x11\xfa\x0c\x9f\x30\xcb\x91\x13\xf2\xf1\xf1\x91\x49\x85\xc2\x58\x8d\x68\x39\x55\x99\xd4\x35\xa9\xa4\xba\x68\x56\x1f\xec\xd7\x74\x7f\x3b\x5f\x01\x2f\x0a\xc5\xcf\x3e\xe6\x3b\x55\x50\x49\x31\x30\x95\xda\xdc\x2b\x64\x7c\x25\x81\x67\x7b\x45\xd1\xd7\xf8\x9a\xfa\xc7\xe0\x75\x09\x92\xa2\x17\x61\x52\xc2\xcb\xd4\xab\x38\xda\x0c\x36\x7b\x67\x8b\xe3\x28\xa9\x7b\x1e\x49\x0e\x93\x8e\x9c\xaa\x12\x9b\x14\xa8\x62\xe5\x3b\x5e\x9c\xac\x51\x90\xad\x64\x3b\xd8\xc0\x00\xca\x6a\xb4\xff\x79\xa9\x71\xb9\x60\xbb\xc5\xaa\xf0\x68\xb6\x87\xe5\x5f\x1e\xbf\x6a\xe3\x28\xd2\x68\x8f\x5a\x14\x83\xb7\x1b\x5e\x37\xa8\xa3\xf9\x3a\xa0\xdf\x02\x38\x84\xf6\x29\xf6\xc6\x67\xde\x67\x77\xaf\x90\x52\x3f\x15\xc5\x0d\xed\x5b\x5d\x4a\x65\x4d\x00\xf7\x7d\x7e\x51\x2e\xc0\x2c\xc7\x7b\x17\x21\x47\x17\xee\x7b\x30\x86\x3b\x96\x54\xb1\xff\xf1\x92\x8f\x5a\xa5\xce\x74\x2b\x9e\x87\xfc\x9c\xcf\xce\x2a\xe5\x33\x42\xa9\xbf\xdd\x97\xb2\x9c\x2a\xd8\xc0\xb7\xcc\x37\xd9\x0d\xfe\x32\xe1\x54\x25\xe9\x8c\xd1\xc8\x37\x54\x6c\x68\xd4\x2c\xe3\x4d\xd7\x22\x8e\xba\xd4\x8f\xc0\x5c\x82\x70\x1a\xee\x4d\xc1\x1f\x3a\x3a\x21\x4c\x85\x02\xf3\xfe\xd8\xb7\x94\x2b\xa9\x6d\x0e\xaf\x71\x14\x45\xc9\xb8\x63\x44\xe3\x9e\x35\xcd\x3f\xc6\x5e\x1a\xcc\xae\x4c\x25\x69\x44\x08\x18\xc9\xd1\x1e\x98\xa8\xef\x9e\x94\x0b\x3a\xa3\xf1\x99\xdf\x52\x7f\x30\xf2\xa8\x2b\x34\x43\xcd\x88\x53\x75\x45\xe1\x3f\x9c\xfb\xa8\x9b\x1c\x92\x71\x85\x5a\xd3\x65\x96\x35\x38\xdb\x23\x67\xb8\xa2\x20\x27\xac\xac\xd4\xe4\xb4\x26\x8f\xeb\x07\x42\x9b\x86\xb4\xd7\x8e\xb4\xe7\x8e\xb4\x97\x2e\xe3\x27\x9b\xa4\x41\xd6\xd2\x1c\xb7\x3b\xc9\x29\x73\x0d\x7c\x4d\x68\x92\x42\xb2\x75\x8f\xca\x3d\x76\xc9\xdb\x0c\xac\xa8\xfb\xb7\xe4\xd0\x7a\x1d\xa7\x51\xe9\x26\x98\xa3\x51\x1a\x76\xc5\x1c\x1e\xd7\x0f\x93\x99\xd3\x73\x79\x95\x92\xe7\xb0\xfe\xd7\xd9\x3a\x7f\x6f\xf7\xee\xa6\x59\x99\x35\x35\xec\x4b\xd8\xdd\x60\x1f\xc2\xd6\xba\x3d\x0b\xa2\x83\x59\x1d\x82\xc7\x12\x01\xc6\xad\x8c\xff\xc1\x74\x2b\xb7\x5b\xbf\x03\x00\x00\xff\xff\x64\x46\xae\xe3\xee\x05\x00\x00")

func staticJavascriptPlaceholderClientMapsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptPlaceholderClientMapsJs,
		"static/javascript/placeholder.client.maps.js",
	)
}

func staticJavascriptPlaceholderClientMapsJs() (*asset, error) {
	bytes, err := staticJavascriptPlaceholderClientMapsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/placeholder.client.maps.js", size: 1518, mode: os.FileMode(420), modTime: time.Unix(1567016987, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticJavascriptPlaceholderClientResultsJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x57\x51\x6f\xdb\x36\x10\x7e\x96\x7e\x05\xab\x3d\x54\x42\x14\xd5\xdd\x06\xac\x90\x66\x0c\x6d\xd1\x02\x1d\x92\xb4\xe8\xfa\x16\x04\x06\x2d\x51\x36\x31\x9a\x14\x28\xaa\xb6\x96\xfa\xbf\x0f\x3c\x92\x12\x65\x3b\x6a\x5e\xe2\x88\xfc\xee\xbb\xfb\x78\xc7\x23\xf9\x1d\x4b\xd4\x30\x5c\x92\xad\x60\x15\x91\x68\x39\xf9\xfa\xf1\x03\x3d\x1e\x8b\xd0\x1b\xca\x4a\x46\x09\x57\x53\x9c\x1b\xb4\xf0\x0b\xf8\x4c\x92\xb6\x63\xaa\x45\x4b\x14\xd7\x1d\x2f\x15\x15\x3c\x4e\x1e\xc3\x10\x21\x84\x74\x0c\x3b\x2c\xff\x25\x72\x25\x1a\xc0\x3c\x86\x81\xc4\x15\xed\xda\x1c\xbd\x49\xc3\xa0\xa6\x8c\xbd\x17\x4c\xc8\x1c\x45\xbf\xd4\xf5\x1f\x6f\x16\x8b\x28\x0d\x83\xd2\x0d\x2d\xcc\xf7\x9e\xd0\xcd\x56\xe5\xe8\x75\x1a\x06\xa2\xc1\x25\x55\xbd\xf9\xd0\xf6\x9f\xdd\xc0\x22\x7b\x03\x5e\x8f\x05\xfc\x0c\x11\xb4\x84\xd5\xe0\x3a\x0c\x5e\x56\x12\xef\xbf\x9a\x88\x6f\x71\xf3\x32\x47\x43\xcc\x3b\xdc\xa4\x48\x8a\x7d\xab\x83\x0f\x9c\x6d\x29\x3a\x58\x13\x3d\x91\x31\xc2\x37\x6a\x5b\xd8\x69\x5a\xa3\xf8\x85\x01\x24\x8f\x61\x10\x48\xa2\x3a\xc9\x51\x8d\x59\x4b\x0a\x03\x39\x7a\x4c\x3b\xca\x0f\x68\x89\x16\xd9\xa2\x98\x0c\xf6\xe7\x83\xf8\x70\x01\x89\x0f\x53\xa4\xf9\x5b\x0b\x89\x62\x3d\x4f\x97\x8b\x02\x51\xf4\xa7\x09\xa8\x40\xf4\xea\x0a\xa2\x0a\x83\x40\x4f\x4b\xb1\xb7\x2a\xee\xe9\x43\x61\x07\xd7\x6b\x71\x30\xa3\xd9\x86\xa8\xb7\x4a\x49\xba\xee\x14\x89\xa3\x0a\x2b\x7c\xbd\x16\x1d\xaf\x28\xdf\x5c\xaf\xc5\x21\x4a\x0a\xc3\x65\x44\x6b\x43\x60\xd7\x21\x94\x82\x2b\xca\x3b\xad\x39\x38\x1a\x94\x25\xd6\x3f\x59\xdb\x30\xaa\xe2\x28\x9d\x50\xc0\x8c\x59\x4e\xf4\x62\x89\x7e\x9f\x23\xb3\xe1\xaf\xec\x02\x6a\xd3\xfb\xc5\xa0\xc1\xce\xf4\x6e\xe6\xf5\x74\xc6\x2c\x25\xcc\xfc\x7a\x3a\x33\xd8\xfc\xf6\x60\x43\xb3\x2e\x6e\xb1\xda\x66\x3b\xca\x63\xfd\x9d\x0e\xce\x41\x80\xf5\xe5\x43\xfa\x01\xd2\x1b\x88\x71\x6a\x20\xf8\x10\xeb\xef\x74\x08\xc7\x41\xfa\x13\x48\x3f\x40\x80\xc5\x94\x8f\x97\x69\xa8\x64\x9d\xc4\x7b\x64\x7c\x42\xb0\x0f\x5e\x89\x70\x62\x66\x81\x0b\x82\x78\x28\x4e\x19\x20\xa9\x2d\xe0\xda\x7d\xaa\x4d\x1c\x66\x87\x9b\xac\xa6\xea\x1d\x00\x62\x83\x4b\x5c\xad\xbf\x7a\x85\x76\xb8\x5f\x93\xbf\x86\xcf\x9b\xec\x8e\x1c\xd4\x7f\x84\x67\x5b\xdc\x6e\xe3\xc7\x1d\x6e\x72\xcd\x71\x4c\x26\x3e\xed\xa6\x50\x12\x52\x7a\x4c\x4f\xf6\xe0\x47\x82\x55\x27\x49\xfb\xf3\x8d\x58\x1b\xe4\xaa\x14\x8c\x11\x00\xa2\x25\xec\x6c\xd7\x80\xde\x3a\xb2\xf7\x03\x22\x06\x96\xc2\x63\x61\xb8\x87\x56\x78\x93\x6d\x88\xf8\xfb\x9f\xcf\x77\xf1\x39\x6f\xaa\x9b\x54\xd0\x08\xca\xd5\x37\x71\xa3\x0d\xc6\xe0\x90\xc3\xa7\x88\x61\xc5\xf8\x26\x41\xae\x72\xad\xd2\x9b\xac\xa4\xb2\x64\xe4\x16\xda\x5e\x6c\x50\xa9\xdf\x05\xa1\x00\x8e\x69\x18\x04\x82\x7f\xc0\xe5\xd6\x86\xed\xad\x80\xe7\xa3\x27\x72\xd8\x1b\xf6\x47\xef\x1f\x8b\xc8\x1a\x29\x1a\x22\x15\x25\x2d\xa0\x74\x0d\x43\x85\xef\x45\x4d\x2b\xb4\x44\xe7\xb8\xfb\x68\x2f\xea\x9c\x56\x11\xd4\x3c\x80\x39\xde\x91\x19\xac\x9e\xf6\xd0\x70\x04\xa8\xbe\x99\x33\x19\x30\xda\x6e\x30\x14\x4d\xd7\xac\x14\x39\xe8\x7e\x0a\x3e\xaf\x50\x84\xe2\x08\x5d\xd9\x70\xaf\x50\x94\x20\xda\x22\x8c\xf4\xd8\xc0\x01\x9e\x61\x25\xb2\x35\xe5\xd5\x17\x4d\x13\x8f\x64\xb0\x9c\x76\xb7\x04\x76\xc7\x9c\x14\xa1\x31\xc6\x55\xf5\x4d\xe8\xea\x72\x93\x36\x63\x30\x6b\x8a\x33\x08\x83\x97\x4f\x97\x93\x5f\xa4\x4f\xd5\x27\x6c\xad\xf3\x6d\x77\xf1\x18\x79\x7e\x1b\x9f\x6b\xe2\x7b\x51\xaf\x20\xd7\x4f\xb4\xf1\xfd\x56\xb4\x82\xd7\x54\xb6\xea\x9a\x56\x11\x6c\x07\xdb\xc6\x8d\xa9\xdf\x7b\x5b\xc1\x48\xc6\xc4\x26\x8e\xbe\x8a\xbd\xce\xc5\x8e\xb6\x2d\xe5\x1b\x74\x81\x0a\x61\xe7\x29\x1a\x72\x30\x6d\xdf\xe1\x58\x5f\x26\xc4\xc8\x2c\xee\xb5\xcd\xf9\xca\x24\xfd\x1a\x2a\xac\xf0\xd1\x84\xa1\x25\xaa\x44\xd9\xed\xf4\x15\x63\x43\xd4\x07\x46\xf4\xbf\xef\xfa\x4f\x55\x6c\xf9\x7c\x25\xd6\xe8\xb2\x94\x5b\xab\x01\x6a\x8e\x18\xa2\x28\x45\x23\xcd\xec\xd1\x33\xd4\xe1\xac\x84\xb1\xe2\x8b\x33\xbb\x59\x31\x3e\xbd\xaf\xc8\x37\x9f\x97\x35\x6e\xc8\x51\xdb\x09\xeb\x65\x81\xb6\xa7\x98\xbe\xa8\xa8\xea\xaa\x79\x8d\x0e\x34\x48\x1c\xac\x66\x15\x7a\xdc\xbe\x40\xcf\x78\x5e\x9f\x03\x7a\xf2\xa6\x94\xb3\xe9\x63\x82\x6f\x9e\x21\xcd\xa1\x46\x6d\x83\xdd\xbc\x38\x8f\x7e\xa2\xce\x33\xff\x89\x3c\x87\xf4\xf5\x4d\x59\x67\xf6\x16\xc3\x70\x63\xc7\xb2\x25\x1f\x99\xc0\x2a\xf6\x96\x35\xa3\x9c\x13\xf9\xcd\xf5\x48\xab\xea\x04\xee\xc5\xe9\xe3\x83\xc0\x69\x31\xa9\x4a\xf4\x13\x20\x06\x6f\x4b\x74\x87\xef\x92\xcb\xa2\x3e\xf1\xef\x98\xd1\x6a\x48\x90\x9f\xab\xb3\x80\x2e\x8a\x72\x2e\x05\xb7\x2e\x75\xc4\xcf\x72\x39\xa4\x30\x45\x4f\xa9\x9a\x73\x6a\x64\xce\xdc\x43\x87\xc4\x3e\x01\x0a\x27\xa7\xa9\xed\x48\xa3\xf7\xb3\xbe\xe0\x5e\x5a\x76\x93\x7b\x48\x70\x67\xe1\xa5\x10\xd2\x5c\xd8\x98\xbe\x9a\x30\xac\xdc\x65\x55\xcf\x6e\x88\xd8\x99\x57\x15\x04\x14\x41\x07\xca\x51\xf4\x45\xdf\x5e\xf4\xcb\xc9\x0c\x03\x09\xe5\x58\x91\x36\xca\x2d\xa5\x9e\x3c\x16\x2e\x6a\x7d\x82\xb7\x3e\x93\xbd\x25\xe4\x76\x97\xa4\xfe\xf8\xd8\xec\xf2\x51\xc2\x04\x01\x1d\x3d\x87\x45\x98\xfa\xb1\xc7\xe4\xa5\x98\xed\x79\x3b\x46\xad\xc5\x11\x25\xfb\x28\x07\x9d\xc3\xf8\x78\xdb\xd0\xfe\x75\xe0\xa3\x0f\x77\x0c\x67\x4d\xd7\x6e\xdd\x35\x29\xb9\xf0\x1c\x9b\xdc\x23\x75\x2c\xa7\x71\x8c\xe7\x3e\x44\x14\x39\xe6\x28\x1f\xce\xfa\xd4\xd2\xba\x1b\xa6\xbd\x50\x8c\xd4\xfa\x56\x11\x06\xee\x51\x1a\x7a\x18\x7d\x73\xb5\xcf\xd4\x63\x12\x27\x45\xf8\x7f\x00\x00\x00\xff\xff\xdf\x47\xfb\xc0\xaf\x0f\x00\x00")

func staticJavascriptPlaceholderClientResultsJsBytes() ([]byte, error) {
	return bindataRead(
		_staticJavascriptPlaceholderClientResultsJs,
		"static/javascript/placeholder.client.results.js",
	)
}

func staticJavascriptPlaceholderClientResultsJs() (*asset, error) {
	bytes, err := staticJavascriptPlaceholderClientResultsJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/javascript/placeholder.client.results.js", size: 4015, mode: os.FileMode(420), modTime: time.Unix(1567019371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _staticCssPlaceholderClientCss = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x34\xcb\x51\x0a\xc2\x30\x0c\x00\xd0\xef\xe6\x14\x85\xe1\x67\xa1\xa2\x5f\xed\x69\xaa\x8b\xa6\x90\x2d\xa3\x89\x9b\x43\xbc\xbb\x14\xd9\x01\xde\x30\x95\xc5\x7f\xc0\x6d\x75\x34\x4a\xfe\x1c\xe3\x29\x83\x23\xac\x4f\xb2\xe4\xaf\x71\xa5\x0c\x6e\xac\xba\x70\xd9\xd3\x2c\x33\x66\xf8\x02\x0c\x0d\xf5\xc5\xa6\xc1\xca\x8d\xb1\xfb\xa9\xbc\xc3\xa1\x2e\x7f\xb5\x07\x59\xb1\x3d\x58\xb6\xe4\xf5\xde\x84\xb9\x5b\x07\xbf\x00\x00\x00\xff\xff\x64\x3f\x14\x39\x73\x00\x00\x00")

func staticCssPlaceholderClientCssBytes() ([]byte, error) {
	return bindataRead(
		_staticCssPlaceholderClientCss,
		"static/css/placeholder.client.css",
	)
}

func staticCssPlaceholderClientCss() (*asset, error) {
	bytes, err := staticCssPlaceholderClientCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "static/css/placeholder.client.css", size: 115, mode: os.FileMode(420), modTime: time.Unix(1567019440, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"static/javascript/placeholder.client.init.js": staticJavascriptPlaceholderClientInitJs,
	"static/javascript/placeholder.client.maps.js": staticJavascriptPlaceholderClientMapsJs,
	"static/javascript/placeholder.client.results.js": staticJavascriptPlaceholderClientResultsJs,
	"static/css/placeholder.client.css": staticCssPlaceholderClientCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"static": &bintree{nil, map[string]*bintree{
		"css": &bintree{nil, map[string]*bintree{
			"placeholder.client.css": &bintree{staticCssPlaceholderClientCss, map[string]*bintree{}},
		}},
		"javascript": &bintree{nil, map[string]*bintree{
			"placeholder.client.init.js": &bintree{staticJavascriptPlaceholderClientInitJs, map[string]*bintree{}},
			"placeholder.client.maps.js": &bintree{staticJavascriptPlaceholderClientMapsJs, map[string]*bintree{}},
			"placeholder.client.results.js": &bintree{staticJavascriptPlaceholderClientResultsJs, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
